%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: UTF8
%%Title: Generator.pdf
%%Creator: (Adobe Acrobat 19.21.0)
%%For: huangshengjie
%%CreationDate: 2020/7/24, 下午8:33
%%BoundingBox: 0 0 960 540
%%HiResBoundingBox: 0 0 960 540
%%CropBox: 0 0 960 540
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$None SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_AGM_Core/driver_media_override gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 574 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c016 91.163616, 2018/10/29-16:58:49        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2020-07-24T10:54:39Z"
   xmp:ModifyDate="2020-07-24T10:54:39Z"
   pdf:Producer="macOS 版本10.15.1（版号19B2093） Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/driver_media_override gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -540 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 540 li
960 540 li
960 0 li
cp
clp
0 0 mo
959.76 0 li
959.76 540 li
0 540 li
cp
false sop
0 0 0 0 cmyk
f
0 0 mo
960 0 li
960 540 li
0 540 li
cp
f
77.3886 190.21 mo
77.3886 112.781 li
103.832 112.781 li
103.832 190.21 li
cp
.0806592 .0636606 .0646372 0 cmyk
f
.75 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
77.3886 190.21 mo
77.3886 112.781 li
103.832 112.781 li
103.832 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+DengXian-Regular Initial
ct_T42Dict begin
-0.141 -0.25 1.148 0.953
 256 array 0 1 255 {1 index exch /.notdef put} for  /KAAAAA+DengXian-Regular
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000008986670
676d000000000000095400000e79676c79660000000000001c6000001244
6865616400000000000017d0000000366868656100000000000018080000
0024686d7478000000000000182c0000008c6c6f636100000000000018b8
000000486d6178700000000000001900000000206e616d65000000000000
19200000002c70726570000000000000194c000003146764697200000000
000000000000000006650013060d001b060d001b0452001b0000ffe50000
ffe50000ffe5fe03fff6060d001c0000ffe4000000730077006d006d0070
006500650077006d007900630070006500600055006f007400650127006b
006f00610061007f0079006d005c0063006c0072007b007000750065006c
00550061006f007400590075006501270059006200690074004a00590065
0070005900610069004d0057005c006300690071007f0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000055d
0001000005310015007905310015000000000000000000000000000003aa
0014007affb0ffec0000ffb0ffec0000ffb0ffec0000fe25000000000531
000cfcb2fff4000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000085007f0000000000000069
0063005b000000000088007e0075009000000072006b005e00000000007f
0086000000000000006a005f046400150079404927262587868584838281
807f7e7d7c7b7a797877767574737271706f6e6d6c6b6a69686766656463
6261605f5e5d5c5b5a5958575655545351504f4e4d4c4b4a49484746281f
100a092c01b10b0a432343650a2d2c00b10a0b4323430b2d2c01b00643b0
0743650a2d2cb04f2b20b0405158214b525845441b2121591b2321b040b0
042545b004254561648a63525845441b212159592d2c00b00743b006430b
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb002
435458b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb0
02435458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c
2320b000508a8a64b10003255458b0401bb10103255458b005438b59b04f
2b5923b0622b2321235865592d2cb108000c215460432d2cb10c000c2154
60432d2c012047b0024320b8100062b81000635723b8010062b810006357
5a58b020606659482d2cb1000225b00225b0022553b800352378b00225b0
022560b020632020b00625236250588a21b00160231b2020b00625236252
582321b001611b8a212321205959b8ffc11c60b0206323212d2cb1020042
b123018851b1400188535a58b910000020885458b202010243604259b124
01885158b920000040885458b2020202436042b12401885458b202200243
6042004b014b5258b2020802436042591bb940000080885458b202040243
604259b94000008063b80100885458b202080243604259b94000010063b8
0200885458b202100243604259b12601885158b94000020063b804008854
58b202400243604259b94000040063b80800885458b20280024360425959
59595959b10002435458400a0540084009400c020d021bb10102435458b2
054008ba010000090100b30c010d011bb18002435258b2054008b80180b1
09401bb2054008ba01800009014059b9400000808855b94000020063b804
0088555a58b30c000d011bb30c000d0159595942424242422d2c45b1024e
2b23b04f2b20b0405158214b5158b0022545b1014e2b60591b2321b00325
4520648a63b0405358b1024e2b601b215959442d2c20b00050205823651b
2359b114148a7045b04f2b23b1610626602b8a58b005438b592358655923
103a2d2cb003254963234660b04f2b23b00425b0042549b0032563562060
b062602bb003252010468a4660b02063613a2d2cb00016b1020325b10104
25013e003eb10102060cb00a236542b00b2342b1020325b1010425013f00
3fb10102060cb006236542b0072342b00116b10002435458452345201869
8a6323622020b0405058671b665961b02063b0402361b00423421bb10400
4221215918012d2c2045b1004e2b442d2c4b51b1404f2b505b582045b101
4e2b208a8a4420b1400426616361b1014e2b44211b23218a45b1014e2b20
8a234444592d2c4b51b1404f2b505b5845208ab0406163601b23214559b1
014e2b442d2c2345208a4523612064b04051b0042520b0005323b040515a
5ab1404f2b545a588a0c642364235358b140408a612063611b2063591b8a
5963b1024e2b60442d2c012d2c002d2c05b10b0a432343650a2d2cb10a0b
4323430b022d2cb002256366b00225b82000626023622d2cb0022563b020
6066b00225b82000626023622d2cb002256367b00225b82000626023622d
2cb002256366b02060b00225b82000626023622d2c234ab1024e2b2d2c23
4ab1014e2b2d2c238a4a234564b0022564b002256164b003435258212064
59b1024e2b23b000505865592d2c238a4a234564b0022564b002256164b0
0343525821206459b1014e2b23b000505865592d2c20b003254ab1024e2b
8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258ab0672b8a
103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003254660b004
252eb00425b00425b0042620b000505821b06a1bb06c592bb0032546b003
25466061b08062208a2010233a232010233a2d2cb0032547b003254760b0
052547b0806361b00225b00625496323b005254ab080632058621b2159b0
042646608a468a4660b02063612d2cb00426b00425b00425b00426b06e2b
208a2010233a232010233a2d2c2320b001545821b00225b1024e2bb08050
20605920606020b001515821211b20b005515821206661b0402361b10003
2550b00325b00325505a5820b00325618a535821b000591b21591bb00754
582066616523211b2121b000595959b1024e2b2d2cb00225b004254ab000
5358b0001b8a8a238ab00159b004254620666120b00526b0062649b00526
b00526b0702b236165b02060206661b02061652d2cb0022546208a20b000
505821b1024e2b1b452321596165b00225103b2d2cb0042620b802006220
b80200638a236120b05d602bb00525118a128a20398a58ba005d10000004
266356602b23212010204620b1024e2b23611b2321208a201049b1024e2b
593b2d2cba005d10000009256356602bb00525b00525b00526b06d2bb15d
0725602bb00525b00525b00525b00525b06f2bba005d1000000826635660
2b20b0005258b0502bb00525b00525b00725b00725b00525b0712bb00217
38b00052b00225b001525a58b00425b0062549b00325b00525496020b040
5258211bb000525820b0025458b00425b00425b00725b0072549b0021738
1bb00425b00425b00425b0062549b0021738595959595921212121212d2c
ba005d1000000b256356602bb00725b00725b00625b00625b00c25b00c25
b00925b00825b06e2bb0041738b00725b00725b00726b06d2bb00425b004
25b00426b06d2bb0502bb00625b00625b00325b0712bb00525b00525b003
25b002173820b00625b00625b00525b0712b60b00625b00625b0042565b0
021738b00225b002256020b040535821b0406123b04061231bb8ffc05058
b0406023b04060235959b00825b00825b00426b0021738b00525b005258a
b002173820b0005258b00625b0082549b00325b00525496020b040525821
1bb0005258b00625b00625b00625b00625b00b25b00b2549b0041738b006
25b00625b00625b00625b00a25b00a25b00725b0712bb0041738b00425b0
0425b00525b00725b00525b0712bb00217381bb00425b00425b9ffc00002
173859595921212121212121212d2cb00425b0032587b00325b003258a20
b000505821b0651bb068592b64b00425b0042506b00425b0042549202063
b00325206351b1000325545b5821212321071b2063b0022520636120b053
2b8a63b00525b0052587b00425b004264ab00050586559b0042620014623
0046b00526200146230046b0001600b000234801b00023480020b0012348
b00223480120b0012348b002234823b2020001082338b2020001092338b1
020107b00116592d2c23100d0c8a63238a636064b940000400635058b000
381b3c592d2cb00625b00925b00925b00726b0762b23b0005458051b0459
b00425b00626b0772bb00525b00526b00525b00526b0762bb0005458051b
0459b0772b2d2cb00725b00a25b00a25b00826b0762b8ab0005458051b04
59b00525b00726b0772bb00625b00626b00625b00626b0762b08b0772b2d
2cb00725b00a25b00a25b00826b0762b8a8a08b00425b00626b0772bb005
25b00526b00525b00526b0762bb0005458051b0459b0772b2d2cb00825b0
0b25b00b25b00926b0762bb00426b0042608b00525b00726b0772bb00625
b00626b00625b00626b0762b08b0772b2d2c03b00325b003254ab00425b0
03254a02b00525b005264ab00526b005264ab00426638a8a63612d2cb15d
0e25602bb00c2611b0052612b00a2539b0072539b00a25b00a25b00925b0
7c2bb00050b00b25b00825b00a25b07c2bb000505458b00725b00b2587b0
0425b004250bb00a2510b00925c1b00225b002250bb0072510b00625c11b
b00725b00b25b00b25b9ffff00762bb00425b004250bb00725b00a25b077
2bb00a25b00825b00825b9ffff00762bb00225b002250bb00a25b00725b0
772b59b00a2546b00a254660b0082546b008254660b00625b006250bb00c
25b00c25b00c2620b000505821b06a1bb06c592bb00425b004250bb00925
b00925b0092620b000505821b06a1bb06c592b23b00a2546b00a25466061
b0206323b0082546b00825466061b02063b1010c255458041b0559b00a26
2010b003253ab00626b006260bb0072620108a3ab10107265458041b0559
b005262010b002253a8a8a0b232010233a2d2c23b0015458b9000040001b
b940000000598ab0015458b9000040001bb94000000059b07d2b2d2c8a8a
080d8ab0015458b9000040001bb94000000059b07d2b2d2c08b0015458b9
000040001bb940000000590db07d2b2d2cb00426b00426080db00426b004
26080db07d2b2d2c200146230046b00a43b00b438a632362612d2cb0092b
b006252eb005257dc5b00625b00525b0042520b000505821b06a1bb06c59
2bb00525b00425b0032520b000505821b06a1bb06c592b18b00825b00725
b00625b00a25b06f2bb00625b00525b0042620b000505821b0661bb06859
2bb00525b00425b0042620b000505821b0661bb068592b54587db0042510
b00325c5b0022510b00125c5b0052621b00526211bb00626b00425b00325
b00826b06f2b59b100024354587db00225b0822bb00525b0822b20206961
b00443012361b06060206961b0206120b00826b008268ab00217388a8a61
20696161b00217381b2121212159182d2c4b52b1010243535a5823102001
3c003c1b2121592d2c23b00225b00225535820b00425583c1b3959b00160
b8ffe91c592121212d2cb0022547b0022547548a20201011b001608a2012
b00161b0852b2d2cb0042547b002254754232012b001612320b006262020
1011b00160b00626b0852b8a8ab0852b2d2cb00243b00152582121212121
1b462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a7045
6020b0005058b00161b8ffba8b1bb0468c59b0106068013a592d2c2045b0
032546524bb013515b58b0022546206861b00325b003253f2321381b2111
592d2c2045b00325465058b0022546206861b00325b003253f2321381b21
11592d0000000001000000012148ae2109445f0f3cf5001b080000000000
c9ab180100000000d194bf1cfedffdf9093607a100000014000200000000
000000010000067bfe2500000993fedffdee093600010000000000000000
000000000000002308000000030600060517001804f6007a058000b903d0
00b9056a007201fa00ba03b700c1060f006d046a00c1049d00b9041d004f
055700a7040200590497009e039f006404980063041c0064025b00300498
0064046700a501ca00a503c300a001ca00a506bb009e0467009e04960063
0497009e02b600a003400025028b002e0468009a03ba00070386000f0000
00000017005900a400e30114016d018501a501f30233027f02e5031a0381
03e30427048704db0522059705dd0603063a065206b506fb073e079f07d9
083d087f08c608f00922000100000023026400310042000700020010002f
0088000002830e7900040001000000010012000100000000000600170000
4c45575257592b44656e675869616e2d526567756c617200000041120409
006404080055040800590408000104060055040700640406005504060059
04430442b2501fe8411b044200f80442000200e8044200f8044200020401
0033040000550400005903ef003303ee005503ee0059043f043d0021001f
043e043db23c1f27410e043d0037043d0002043b04380018001f043a0438
0032001f04390438b2501fd7412204380001044b000104490055044a0033
044900550449005903fb003303fa005503fa005903ed000103eb005503ec
003303eb005503eb005904350433003c001f04340433b2641f4841210433
0001042f042e0064001f04040064040300550403005903fe003303fd0055
03fd005903f9000103f7005503f8003303f7005503f7005903e900ff03e8
005503e840ff59512cff1f502b451f4f2b801f4e2bff1f4d2bab1f4c2b5e
1f4b2b341f4a2a801f492aff1f482a801f4729ff1f4629561f45292f1f44
291c1f4328721f4228ff1f4128801f40283d1f3f27ff1f3e26ff1f3d25ff
1f3c25261f3b24cd1f3a24ff1f3922ff1f3823ff1f3721931f3621ff1f35
20cd1f3420ff1f331eff1f321e801f311e4f1f301fff1f2f1f931f2e1dff
1f2d1cff1f243a1b195c23225e1f221bcd1f211aff1f2019ff1f1f1e2f1f
1e16ff1f1d17ff1f1c16ff1f1b3919625b183a16625b1a3919625b173a16
625b15193c16935a1325125511251055125910590d260c55052604550c59
04590f670e550b260a5507260655013600550e590a401659065900590926
085503260255085902590340400501b9019000542b4bb807ff524bb00850
5bb00188b02553b00188b040515ab00688b000555a5b58b101018e59858d
8d001d424bb0905358b20300001d4259b10202435158b104038e59002b00
2b2b2b002b002b002b002b2b2b2b2b002b002b2b2b002b002b2b2b012b01
2b012b012b012b012b002b2b2b012b002b2b2b012b012b002b2b2b2b2b2b
012b2b002b2b2b2b2b2b012b2b002b2b2b2b2b2b012b2b2b2b002b2b2b2b
2b2b2b2b2b2b002b2b002b2b2b002b2b002b2b012b00742b2b002b2b2b00
2b2b002b2b2b01742b2b2b00742b2b002b2b002b2b0173742b002b002b2b
002b2b1800>
[4677 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 730 7 <000100baffb00140053100030017be000304380000000103eb000003fa00
3f3f012fed303117113311ba86500581fa7f>KAAAAA+DengXian-Regular AddT42Char 
1 3434 26 <0001009effb003cd03be0017003fb20d0f08b8042fb20a0917b8042fb500
100f0f090d410a03f70000000903fd001300040433006c001303f8003f2b
3f333f12392f33012fed2f33ed32c6303105113426232206151123113426
2733173336363332161511034e7a818ba47f0502720c0435a27eafa95002
54b1a0cbadfdd30317397139c26d69c9d2fd8d00>KAAAAA+DengXian-Regular AddT42Char 
1 3708 28 <0002009efe25043403be001800240051b60f0a1f0712040bb8042f400c0c
00461907070f131212030f410f03f7000c04030016001c0433006c001603
f8000300220433006c000303fe003f2b3f2b3f3f12392f3311392f012fed
2fed1732c630310114022322262723161615112311342733161533363633
32120734262322061514163332360434edd079a3370402027f07770b043c
ac7fccdd839c9eaaaba6a4a1a401b1f7fee25b6529522bfe6f04ad6c6c6c
506f61fef0ffcadcdbcecfd8dc00>KAAAAA+DengXian-Regular AddT42Char 
1 4350 32 <0001009aff9c03cb03aa00170040b40d0a070f01bb042f0016000a042fb6
0f0f10100e0817410903f7000e03fd001300040433006c001303fe003f2b
3f3f3312392f33012fed2fed113310c63031011114163332363511331114
16172327230606232226351101197a818da3800502730c0435a37eafa903
aafdabb29ecbac022efce9397139c16d68c8d2027400>KAAAAA+DengXian-Regular AddT42Char 
1 4218 31 <0001002effa0025f04950015003fb10a0eb8042f400c07030313050c1308
060d0605b80433b26c0a06be03f7000000110433006c000003fe003f2b3f
332b3210c6012f332f12392f33ed32303105222635112335333733152115
21111416333237150601a66f739698225c010ffef13a4b41555760767302
b869ebeb69fd5f4850126317>KAAAAA+DengXian-Regular AddT42Char 

1 0 0 <> KAAAAA+DengXian-Regular AddT42Char 
KAAAAA+DengXian-Regular /CharStrings get begin
/g7 7 def
/g26 26 def
/g28 28 def
/g32 32 def
/g31 31 def
end
KAAAAA+DengXian-Regular /Encoding get
dup 33 /g7 put
dup 34 /g26 put
dup 35 /g28 put
dup 36 /g32 put
dup 37 /g31 put
pop
end
%ADOEndSubsetFont
/XAHLXB+DengXian-Regular /KAAAAA+DengXian-Regular findfont ct_VMDictPut/XAHLXB+DengXian-Regular*1 [33{/.notdef}rp /g7 /g26 /g28 /g32 /g31 218{/.notdef}rp]XAHLXB+DengXian-Regular nfXAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf94.4102 164.88 mo(!"#$%)[-2.99994 -6.62404 -6.87605 -6.62395 0 ]ysh141.571 190.212 mo
141.571 112.783 li
168.014 112.783 li
168.014 190.212 li
cp
0 .720699 .0347295 0 cmyk
f
141.571 190.212 mo
141.571 112.783 li
168.014 112.783 li
168.014 190.212 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: MAAAAA+DengXian-Regular Initial
ct_T42Dict begin
-0.141 -0.25 1.148 0.953
 256 array 0 1 255 {1 index exch /.notdef put} for  /MAAAAA+DengXian-Regular
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000008986670
676d000000000000095400000e79676c79660000000000001c3800000fe4
6865616400000000000017d0000000366868656100000000000018080000
0024686d7478000000000000182c000000706c6f6361000000000000189c
0000003a6d61787000000000000018d8000000206e616d65000000000000
18f80000002c707265700000000000001924000003146764697200000000
000000000000000006650013060d001b060d001b0452001b0000ffe50000
ffe50000ffe5fe03fff6060d001c0000ffe4000000730077006d006d0070
006500650077006d007900630070006500600055006f007400650127006b
006f00610061007f0079006d005c0063006c0072007b007000750065006c
00550061006f007400590075006501270059006200690074004a00590065
0070005900610069004d0057005c006300690071007f0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000055d
0001000005310015007905310015000000000000000000000000000003aa
0014007affb0ffec0000ffb0ffec0000ffb0ffec0000fe25000000000531
000cfcb2fff4000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000085007f0000000000000069
0063005b000000000088007e0075009000000072006b005e00000000007f
0086000000000000006a005f046400150079404927262587868584838281
807f7e7d7c7b7a797877767574737271706f6e6d6c6b6a69686766656463
6261605f5e5d5c5b5a5958575655545351504f4e4d4c4b4a49484746281f
100a092c01b10b0a432343650a2d2c00b10a0b4323430b2d2c01b00643b0
0743650a2d2cb04f2b20b0405158214b525845441b2121591b2321b040b0
042545b004254561648a63525845441b212159592d2c00b00743b006430b
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb002
435458b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb0
02435458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c
2320b000508a8a64b10003255458b0401bb10103255458b005438b59b04f
2b5923b0622b2321235865592d2cb108000c215460432d2cb10c000c2154
60432d2c012047b0024320b8100062b81000635723b8010062b810006357
5a58b020606659482d2cb1000225b00225b0022553b800352378b00225b0
022560b020632020b00625236250588a21b00160231b2020b00625236252
582321b001611b8a212321205959b8ffc11c60b0206323212d2cb1020042
b123018851b1400188535a58b910000020885458b202010243604259b124
01885158b920000040885458b2020202436042b12401885458b202200243
6042004b014b5258b2020802436042591bb940000080885458b202040243
604259b94000008063b80100885458b202080243604259b94000010063b8
0200885458b202100243604259b12601885158b94000020063b804008854
58b202400243604259b94000040063b80800885458b20280024360425959
59595959b10002435458400a0540084009400c020d021bb10102435458b2
054008ba010000090100b30c010d011bb18002435258b2054008b80180b1
09401bb2054008ba01800009014059b9400000808855b94000020063b804
0088555a58b30c000d011bb30c000d0159595942424242422d2c45b1024e
2b23b04f2b20b0405158214b5158b0022545b1014e2b60591b2321b00325
4520648a63b0405358b1024e2b601b215959442d2c20b00050205823651b
2359b114148a7045b04f2b23b1610626602b8a58b005438b592358655923
103a2d2cb003254963234660b04f2b23b00425b0042549b0032563562060
b062602bb003252010468a4660b02063613a2d2cb00016b1020325b10104
25013e003eb10102060cb00a236542b00b2342b1020325b1010425013f00
3fb10102060cb006236542b0072342b00116b10002435458452345201869
8a6323622020b0405058671b665961b02063b0402361b00423421bb10400
4221215918012d2c2045b1004e2b442d2c4b51b1404f2b505b582045b101
4e2b208a8a4420b1400426616361b1014e2b44211b23218a45b1014e2b20
8a234444592d2c4b51b1404f2b505b5845208ab0406163601b23214559b1
014e2b442d2c2345208a4523612064b04051b0042520b0005323b040515a
5ab1404f2b545a588a0c642364235358b140408a612063611b2063591b8a
5963b1024e2b60442d2c012d2c002d2c05b10b0a432343650a2d2cb10a0b
4323430b022d2cb002256366b00225b82000626023622d2cb0022563b020
6066b00225b82000626023622d2cb002256367b00225b82000626023622d
2cb002256366b02060b00225b82000626023622d2c234ab1024e2b2d2c23
4ab1014e2b2d2c238a4a234564b0022564b002256164b003435258212064
59b1024e2b23b000505865592d2c238a4a234564b0022564b002256164b0
0343525821206459b1014e2b23b000505865592d2c20b003254ab1024e2b
8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258ab0672b8a
103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003254660b004
252eb00425b00425b0042620b000505821b06a1bb06c592bb0032546b003
25466061b08062208a2010233a232010233a2d2cb0032547b003254760b0
052547b0806361b00225b00625496323b005254ab080632058621b2159b0
042646608a468a4660b02063612d2cb00426b00425b00425b00426b06e2b
208a2010233a232010233a2d2c2320b001545821b00225b1024e2bb08050
20605920606020b001515821211b20b005515821206661b0402361b10003
2550b00325b00325505a5820b00325618a535821b000591b21591bb00754
582066616523211b2121b000595959b1024e2b2d2cb00225b004254ab000
5358b0001b8a8a238ab00159b004254620666120b00526b0062649b00526
b00526b0702b236165b02060206661b02061652d2cb0022546208a20b000
505821b1024e2b1b452321596165b00225103b2d2cb0042620b802006220
b80200638a236120b05d602bb00525118a128a20398a58ba005d10000004
266356602b23212010204620b1024e2b23611b2321208a201049b1024e2b
593b2d2cba005d10000009256356602bb00525b00525b00526b06d2bb15d
0725602bb00525b00525b00525b00525b06f2bba005d1000000826635660
2b20b0005258b0502bb00525b00525b00725b00725b00525b0712bb00217
38b00052b00225b001525a58b00425b0062549b00325b00525496020b040
5258211bb000525820b0025458b00425b00425b00725b0072549b0021738
1bb00425b00425b00425b0062549b0021738595959595921212121212d2c
ba005d1000000b256356602bb00725b00725b00625b00625b00c25b00c25
b00925b00825b06e2bb0041738b00725b00725b00726b06d2bb00425b004
25b00426b06d2bb0502bb00625b00625b00325b0712bb00525b00525b003
25b002173820b00625b00625b00525b0712b60b00625b00625b0042565b0
021738b00225b002256020b040535821b0406123b04061231bb8ffc05058
b0406023b04060235959b00825b00825b00426b0021738b00525b005258a
b002173820b0005258b00625b0082549b00325b00525496020b040525821
1bb0005258b00625b00625b00625b00625b00b25b00b2549b0041738b006
25b00625b00625b00625b00a25b00a25b00725b0712bb0041738b00425b0
0425b00525b00725b00525b0712bb00217381bb00425b00425b9ffc00002
173859595921212121212121212d2cb00425b0032587b00325b003258a20
b000505821b0651bb068592b64b00425b0042506b00425b0042549202063
b00325206351b1000325545b5821212321071b2063b0022520636120b053
2b8a63b00525b0052587b00425b004264ab00050586559b0042620014623
0046b00526200146230046b0001600b000234801b00023480020b0012348
b00223480120b0012348b002234823b2020001082338b2020001092338b1
020107b00116592d2c23100d0c8a63238a636064b940000400635058b000
381b3c592d2cb00625b00925b00925b00726b0762b23b0005458051b0459
b00425b00626b0772bb00525b00526b00525b00526b0762bb0005458051b
0459b0772b2d2cb00725b00a25b00a25b00826b0762b8ab0005458051b04
59b00525b00726b0772bb00625b00626b00625b00626b0762b08b0772b2d
2cb00725b00a25b00a25b00826b0762b8a8a08b00425b00626b0772bb005
25b00526b00525b00526b0762bb0005458051b0459b0772b2d2cb00825b0
0b25b00b25b00926b0762bb00426b0042608b00525b00726b0772bb00625
b00626b00625b00626b0762b08b0772b2d2c03b00325b003254ab00425b0
03254a02b00525b005264ab00526b005264ab00426638a8a63612d2cb15d
0e25602bb00c2611b0052612b00a2539b0072539b00a25b00a25b00925b0
7c2bb00050b00b25b00825b00a25b07c2bb000505458b00725b00b2587b0
0425b004250bb00a2510b00925c1b00225b002250bb0072510b00625c11b
b00725b00b25b00b25b9ffff00762bb00425b004250bb00725b00a25b077
2bb00a25b00825b00825b9ffff00762bb00225b002250bb00a25b00725b0
772b59b00a2546b00a254660b0082546b008254660b00625b006250bb00c
25b00c25b00c2620b000505821b06a1bb06c592bb00425b004250bb00925
b00925b0092620b000505821b06a1bb06c592b23b00a2546b00a25466061
b0206323b0082546b00825466061b02063b1010c255458041b0559b00a26
2010b003253ab00626b006260bb0072620108a3ab10107265458041b0559
b005262010b002253a8a8a0b232010233a2d2c23b0015458b9000040001b
b940000000598ab0015458b9000040001bb94000000059b07d2b2d2c8a8a
080d8ab0015458b9000040001bb94000000059b07d2b2d2c08b0015458b9
000040001bb940000000590db07d2b2d2cb00426b00426080db00426b004
26080db07d2b2d2c200146230046b00a43b00b438a632362612d2cb0092b
b006252eb005257dc5b00625b00525b0042520b000505821b06a1bb06c59
2bb00525b00425b0032520b000505821b06a1bb06c592b18b00825b00725
b00625b00a25b06f2bb00625b00525b0042620b000505821b0661bb06859
2bb00525b00425b0042620b000505821b0661bb068592b54587db0042510
b00325c5b0022510b00125c5b0052621b00526211bb00626b00425b00325
b00826b06f2b59b100024354587db00225b0822bb00525b0822b20206961
b00443012361b06060206961b0206120b00826b008268ab00217388a8a61
20696161b00217381b2121212159182d2c4b52b1010243535a5823102001
3c003c1b2121592d2c23b00225b00225535820b00425583c1b3959b00160
b8ffe91c592121212d2cb0022547b0022547548a20201011b001608a2012
b00161b0852b2d2cb0042547b002254754232012b001612320b006262020
1011b00160b00626b0852b8a8ab0852b2d2cb00243b00152582121212121
1b462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a7045
6020b0005058b00161b8ffba8b1bb0468c59b0106068013a592d2c2045b0
032546524bb013515b58b0022546206861b00325b003253f2321381b2111
592d2c2045b00325465058b0022546206861b00325b003253f2321381b21
11592d0000000001000000012148ae2109445f0f3cf5001b080000000000
c9ab180100000000d194bf1cfedffdf9093607a100000014000200000000
000000010000067bfe2500000993fedffdee093600010000000000000000
000000000000001c08000000023100000437009b0437006f043700550437
002d04370075043700750437006a043700670437006801fa00ba049d00b9
040200590497009e039f0064041c0064046700a503c300a006bb009e0467
009e049600630497009e02b600a003400025028b002e0599001a0386000f
0000000000000035008200f30136019501fa022802a9030b0323036f03d6
0438047c04d00516054d05b005f60639069a06d40738077a07c007f20000
00010000001c026400310042000700020010002f0088000002830e790004
00010000000100120001000000000006001700004e4f4e5852452b44656e
675869616e2d526567756c61720000004112040900640408005504080059
040800010406005504070064040600550406005904430442b2501fe8411b
044200f80442000200e8044200f804420002040100330400005504000059
03ef003303ee005503ee0059043f043d0021001f043e043db23c1f27410e
043d0037043d0002043b04380018001f043a04380032001f04390438b250
1fd7412204380001044b000104490055044a0033044900550449005903fb
003303fa005503fa005903ed000103eb005503ec003303eb005503eb0059
04350433003c001f04340433b2641f48412104330001042f042e0064001f
04040064040300550403005903fe003303fd005503fd005903f9000103f7
005503f8003303f7005503f7005903e900ff03e8005503e840ff59512cff
1f502b451f4f2b801f4e2bff1f4d2bab1f4c2b5e1f4b2b341f4a2a801f49
2aff1f482a801f4729ff1f4629561f45292f1f44291c1f4328721f4228ff
1f4128801f40283d1f3f27ff1f3e26ff1f3d25ff1f3c25261f3b24cd1f3a
24ff1f3922ff1f3823ff1f3721931f3621ff1f3520cd1f3420ff1f331eff
1f321e801f311e4f1f301fff1f2f1f931f2e1dff1f2d1cff1f243a1b195c
23225e1f221bcd1f211aff1f2019ff1f1f1e2f1f1e16ff1f1d17ff1f1c16
ff1f1b3919625b183a16625b1a3919625b173a16625b15193c16935a1325
125511251055125910590d260c55052604550c5904590f670e550b260a55
07260655013600550e590a40165906590059092608550326025508590259
0340400501b9019000542b4bb807ff524bb008505bb00188b02553b00188
b040515ab00688b000555a5b58b101018e59858d8d001d424bb0905358b2
0300001d4259b10202435158b104038e59002b002b2b2b002b002b002b00
2b2b2b2b2b002b002b2b2b002b002b2b2b012b012b012b012b012b012b00
2b2b2b012b002b2b2b012b012b002b2b2b2b2b2b012b2b002b2b2b2b2b2b
012b2b002b2b2b2b2b2b012b2b2b2b002b2b2b2b2b2b2b2b2b2b002b2b00
2b2b2b002b2b002b2b012b00742b2b002b2b2b002b2b002b2b2b01742b2b
2b00742b2b002b2b002b2b0173742b002b002b2b002b2b1800>
[4069 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 1558 11 <000100baffb00140053100030017be000304380000000103eb000003fa00
3f3f012fed303117113311ba86500581fa7f>MAAAAA+DengXian-Regular AddT42Char 
1 2912 20 <0001009effb003cd03be0017003fb20d0f08b8042fb20a0917b8042fb500
100f0f090d410a03f70000000903fd001300040433006c001303f8003f2b
3f333f12392f33012fed2f33ed32c6303105113426232206151123113426
2733173336363332161511034e7a818ba47f0502720c0435a27eafa95002
54b1a0cbadfdd30317397139c26d69c9d2fd8d00>MAAAAA+DengXian-Regular AddT42Char 
1 3496 24 <00010025ff9c030303be0029004cb31b000622bb042f00150000042f400d
0c102626181c1c18070703181f410a0434006c001803f80003000a043400
6c000303fe003f2b3f2b12392f11392f11391133012fed2fedc610c43031
25140623222627371616333235342e02272e023534363332161707262623
220615141616171e020303bdaba0b62075157774ec2b4b673c6e6f3ca6a1
92a11c7811675f6765274d8a87703fc9909d7184155354bf36442b1d101b
45684b87946c750e4b415951343e2b2525476900>MAAAAA+DengXian-Regular AddT42Char 
1 3696 25 <0001002effa0025f04950015003fb10a0eb8042f400c07030313050c1308
060d0605b80433b26c0a06be03f7000000110433006c000003fe003f2b3f
332b3210c6012f332f12392f33ed32303105222635112335333733152115
21111416333237150601a66f739698225c010ffef13a4b41555760767302
b869ebeb69fd5f4850126317>MAAAAA+DengXian-Regular AddT42Char 
1 1758 13 <00020059ff9c036803be000a0025005cb11f09bb042e0013000b042f400d
17040d1e1e220d0e0e0c221605b80435b46c1616220c410d03fd0022001b
0433006c002203f8001000000433006c001003fe003f2b3f2b3f12392f2b
111239113311392f012f3333ed2fedc43031253236363535070606151405
232723062322263534363737353426232206072736363332161501ba5889
4e92ccad028a79060467d99fadeff9a773796f71157820b39cbfab055391
507b04057273c155b5c99d8b9ea60704299089475419816abecf>MAAAAA+DengXian-Regular AddT42Char 
1 3052 21 <00020063ff9c043303be000b00170031bc0012042e00060000042eb20c09
0f410a0433006c000903f8000300150433006c000303fe003f2b3f2b012f
ed2fed303101140023220035340033321203342623220615141633323604
33fefdeae1fefe0102e7eef985b0aeb1b7b5a7b4b601aef8fee6011df5f9
0117fef1feffd2d5dacdcadfd800>MAAAAA+DengXian-Regular AddT42Char 
1 3380 23 <000100a0ffb0029403be00130034b2030613b8042fb6000c070606000341
0903f7000003fd000a000f0433006c000a03f8003f2b3f3f12392f33012f
2fed32c630311711342733161533363633321715262322061511a909760b
042a8a6d2a2426397e8e5002fe51ab6e798774097609d7bcfdfb>MAAAAA+DengXian-Regular AddT42Char 
1 2714 19 <0001009effb0062103be00260055b2151208b8042fb40909001811bb042f
00120026042f40090019201f0318181215b803f7b2000912b803fdb2041c
0db80433b26c221cb803f8003f332b323f33333f12392f1733012fed2fed
3212392fed10c63031051134262322061511231134262322061511231134
27331617333636333216173336333216151105a26d7e81947e6e7b7b9c7f
07720804043298778094160561eda49f500254b69bc598fdb80254b39ec7
a1fdc303175e85635f6d697b68e3c4d7fd8d>MAAAAA+DengXian-Regular AddT42Char 

1 0 0 <> MAAAAA+DengXian-Regular AddT42Char 
MAAAAA+DengXian-Regular /CharStrings get begin
/g11 11 def
/g20 20 def
/g24 24 def
/g25 25 def
/g13 13 def
/g21 21 def
/g23 23 def
/g19 19 def
end
MAAAAA+DengXian-Regular /Encoding get
dup 33 /g11 put
dup 34 /g20 put
dup 35 /g24 put
dup 36 /g25 put
dup 37 /g13 put
dup 38 /g21 put
dup 39 /g23 put
dup 40 /g19 put
pop
end
%ADOEndSubsetFont
/XAHLXC+DengXian-Regular /MAAAAA+DengXian-Regular findfont ct_VMDictPut/XAHLXC+DengXian-Regular*1 [33{/.notdef}rp /g11 /g20 /g24 /g25 /g13 /g21 /g23 /g19 215{/.notdef}rp]XAHLXC+DengXian-Regular nfXAHLXC+DengXian-Regular*1 [0 -9 -9 0 0 0 ]msf157.393 184.56 mo(!"#$%"$)[-3.58015 -6.33423 -4.95724 -4.20114 -5.83026 -6.33423 0 ]ysh157.393 143.28 mo("&'\()[-6.32973 -6.45569 -4.32274 0 ]ysh147.127 151.499 mo
147.127 151.499 li
.776394 .626703 .405005 .218875 cmyk
@
147.127 151.499 mo
147.127 151.499 li
@
147.127 151.499 mo
147.127 151.499 li
@
115.8 190.212 mo
115.8 112.783 li
142.243 112.783 li
142.243 190.212 li
cp
.325963 .164797 0 0 cmyk
f
115.8 190.212 mo
115.8 112.783 li
142.243 112.783 li
142.243 190.212 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXB+DengXian-Regular gcheck setglobal} if
1 178 3 <0001007aff9c04bf05460018003ab900100438400b0309170a0a06161600
060d410a043d006c000603ec00000013043d006c000003fb003f2b3f2b12
392f11392f012f332fed3031052000111000213216170726262322021110
1233323637170202c0feeffecb013c0118b3f5457c33b985dcefefd495c0
2f758c64018701540154017b909e348070febefee5fee0feb6907c36feb9
>XAHLXB+DengXian-Regular AddT42Char 
1 3574 27 <00020063ff9c043303be000b00170031bc0012042e00060000042eb20c09
0f410a0433006c000903f8000300150433006c000303fe003f2b3f2b012f
ed2fed303101140023220035340033321203342623220615141633323604
33fefdeae1fefe0102e7eef985b0aeb1b7b5a7b4b601aef8fee6011df5f9
0117fef1feffd2d5dacdcadfd800>XAHLXB+DengXian-Regular AddT42Char 
1 4492 33 <00010007ffb003b303aa000b001eb3020b0a02be03f7000100060434006c
000103fd003f2b3f33012f2f3031052301330116173636370133022294fe
79880105350f112314010d865003fafd3c953b34683302c5>XAHLXB+DengXian-Regular AddT42Char 
XAHLXB+DengXian-Regular /CharStrings get begin
/g3 3 def
/g27 27 def
/g33 33 def
end
XAHLXB+DengXian-Regular /Encoding get
dup 38 /g3 put
dup 39 /g27 put
dup 40 /g33 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXB+DengXian-Regular*1 [33{/.notdef}rp /g7 /g26 /g28 /g32 /g31 /g3 /g27 /g33 215{/.notdef}rp]XAHLXB+DengXian-Regular nfXAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf132.822 164.88 mo(&'"\()[-7.49995 -6.87598 -6.62402 0 ]ysh165.966 190.208 mo
165.966 112.779 li
192.409 112.779 li
192.409 190.208 li
cp
.0122683 .218173 .404089 0 cmyk
f
165.966 190.208 mo
165.966 112.779 li
192.409 112.779 li
192.409 190.208 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXB+DengXian-Regular gcheck setglobal} if
1 552 6 <00010072ff9c04df054600190051b508181515130ebb0438000300180439
b613090900061615b8043db56c161600060b410a043d006c000603ec0000
0011043d006c000003fb003f2b3f2b12392f2b1112392f012fed2fed1239
2f10c4303105200011100021201307262122021110003332371121352111
0602dcfed9febd013c01240182808161fedee5f00101e5ec94fe8801f6cb
640184015701590176fecb2ef0fec9fedbfedffeb79a01466ffe20e0>XAHLXB+DengXian-Regular AddT42Char 
1 778 8 <000100c1ffb00391053100050022b900030438b2000401be03eb00000003
043d006c000003fa003f2b3f012f2fed3031171133112115c186024a5005
81faf071>XAHLXB+DengXian-Regular AddT42Char 
1 1482 13 <000100a7ff9c04b005310011002abc000604380003000f0438b20c0d04be
03eb00000009043d006c000003fb003f2b3f33012fed2fed303105220035
1133111416333236351133111400029decfef686c0b3becb87fee864010b
f40396fc77c5d7dccd037cfc7efafee7>XAHLXB+DengXian-Regular AddT42Char 
XAHLXB+DengXian-Regular /CharStrings get begin
/g6 6 def
/g8 8 def
/g13 13 def
end
XAHLXB+DengXian-Regular /Encoding get
dup 41 /g6 put
dup 42 /g8 put
dup 43 /g13 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXB+DengXian-Regular*1 [33{/.notdef}rp /g7 /g26 /g28 /g32 /g31 /g3 /g27 /g33 /g6 /g8 /g13 212{/.notdef}rp]XAHLXB+DengXian-Regular nfXAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf182.988 162.48 mo(\)*+)[-8.12523 -5.62926 0 ]ysh147.132 151.499 mo
147.132 151.499 li
.776394 .626703 .405005 .218875 cmyk
@
173.575 151.499 mo
173.575 151.499 li
@
147.132 151.499 mo
147.132 151.499 li
@
161.781 165.642 mo
161.781 165.642 li
@
188.224 165.642 mo
188.224 165.642 li
@
161.781 165.642 mo
161.781 165.642 li
@
210.159 190.21 mo
210.159 112.781 li
222.513 112.781 li
222.513 190.21 li
cp
0 .720699 .0347295 0 cmyk
f
210.159 190.21 mo
210.159 112.781 li
222.513 112.781 li
222.513 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
228.869 151.497 mo
228.869 151.497 li
@
228.869 151.497 mo
228.869 151.497 li
@
228.869 151.497 mo
228.869 151.497 li
@
197.542 190.211 mo
197.542 112.781 li
210.159 112.781 li
210.159 190.211 li
cp
.325963 .164797 0 0 cmyk
f
197.542 190.211 mo
197.542 112.781 li
210.159 112.781 li
210.159 190.211 li
cp
.776394 .626703 .405005 .218875 cmyk
@
222.513 190.207 mo
222.513 112.78 li
234.6 112.78 li
234.6 190.207 li
cp
.0122683 .218173 .404089 0 cmyk
f
222.513 190.207 mo
222.513 112.78 li
234.6 112.78 li
234.6 190.207 li
cp
.776394 .626703 .405005 .218875 cmyk
@
228.874 151.497 mo
228.874 151.497 li
@
228.874 151.497 mo
228.874 151.497 li
@
278.544 151.495 mo
278.544 151.495 li
@
280.254 151.495 mo
280.254 151.495 li
@
320.733 151.495 mo
320.733 151.495 li
@
322.444 151.495 mo
322.444 151.495 li
@
324.154 151.495 mo
324.154 151.495 li
@
325.865 151.495 mo
325.865 151.495 li
@
327.575 151.495 mo
327.575 151.495 li
@
329.286 151.495 mo
329.286 151.495 li
@
330.996 151.495 mo
330.996 151.495 li
@
474.297 151.495 mo
474.297 151.495 li
@
476.008 151.495 mo
476.007 151.495 li
@
477.718 151.495 mo
477.718 151.495 li
@
479.428 151.495 mo
479.428 151.495 li
@
481.139 151.495 mo
481.139 151.495 li
@
297.844 190.21 mo
297.844 112.781 li
310.198 112.781 li
310.198 190.21 li
cp
0 .720699 .0347295 0 cmyk
f
297.844 190.21 mo
297.844 112.781 li
310.198 112.781 li
310.198 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
316.554 151.497 mo
316.554 151.497 li
@
316.554 151.497 mo
316.554 151.497 li
@
316.554 151.497 mo
316.554 151.497 li
@
285.228 190.211 mo
285.228 112.781 li
297.844 112.781 li
297.844 190.211 li
cp
.325963 .164797 0 0 cmyk
f
285.228 190.211 mo
285.228 112.781 li
297.844 112.781 li
297.844 190.211 li
cp
.776394 .626703 .405005 .218875 cmyk
@
310.198 190.207 mo
310.198 112.78 li
322.285 112.78 li
322.285 190.207 li
cp
.0122683 .218173 .404089 0 cmyk
f
310.198 190.207 mo
310.198 112.78 li
322.286 112.78 li
322.286 190.207 li
cp
.776394 .626703 .405005 .218875 cmyk
@
316.559 151.497 mo
316.559 151.497 li
@
316.559 151.497 mo
316.559 151.497 li
@
341.731 190.21 mo
341.731 112.781 li
354.085 112.781 li
354.085 190.21 li
cp
0 .720699 .0347295 0 cmyk
f
341.731 190.21 mo
341.731 112.781 li
354.085 112.781 li
354.085 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
360.441 151.497 mo
360.441 151.497 li
@
360.441 151.497 mo
360.441 151.497 li
@
360.441 151.497 mo
360.441 151.497 li
@
329.115 190.211 mo
329.115 112.781 li
341.731 112.781 li
341.731 190.211 li
cp
.325963 .164797 0 0 cmyk
f
329.115 190.211 mo
329.115 112.781 li
341.731 112.781 li
341.731 190.211 li
cp
.776394 .626703 .405005 .218875 cmyk
@
354.086 190.207 mo
354.086 112.78 li
366.173 112.78 li
366.173 190.207 li
cp
.0122683 .218173 .404089 0 cmyk
f
354.086 190.207 mo
354.086 112.78 li
366.173 112.78 li
366.173 190.207 li
cp
.776394 .626703 .405005 .218875 cmyk
@
360.446 151.497 mo
360.446 151.497 li
@
360.446 151.497 mo
360.446 151.497 li
@
253.154 190.21 mo
253.154 112.781 li
265.508 112.781 li
265.508 190.21 li
cp
0 .720699 .0347295 0 cmyk
f
253.154 190.21 mo
253.154 112.781 li
265.508 112.781 li
265.508 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
271.864 151.497 mo
271.864 151.497 li
@
271.864 151.497 mo
271.864 151.497 li
@
271.864 151.497 mo
271.864 151.497 li
@
240.537 190.211 mo
240.537 112.781 li
253.154 112.781 li
253.154 190.211 li
cp
.325963 .164797 0 0 cmyk
f
240.537 190.211 mo
240.537 112.781 li
253.154 112.781 li
253.154 190.211 li
cp
.776394 .626703 .405005 .218875 cmyk
@
265.508 190.207 mo
265.508 112.78 li
277.595 112.78 li
277.595 190.207 li
cp
.0122683 .218173 .404089 0 cmyk
f
265.508 190.207 mo
265.508 112.78 li
277.595 112.78 li
277.595 190.207 li
cp
.776394 .626703 .405005 .218875 cmyk
@
271.869 151.497 mo
271.869 151.497 li
@
271.869 151.497 mo
271.869 151.497 li
@
546.503 190.212 mo
546.503 112.783 li
572.946 112.783 li
572.946 190.212 li
cp
0 .720699 .0347295 0 cmyk
f
546.503 190.212 mo
546.503 112.783 li
572.946 112.783 li
572.946 190.212 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXC+DengXian-Regular*1 [0 -9 -9 0 0 0 ]msf562.324 184.56 mo(!"#$%"$)[-3.58015 -6.33423 -4.95724 -4.20114 -5.83026 -6.33423 0 ]ysh562.324 143.28 mo("&'\()[-6.32973 -6.45569 -4.32274 0 ]ysh520.732 190.212 mo
520.732 112.783 li
547.175 112.783 li
547.175 190.212 li
cp
.325963 .164797 0 0 cmyk
f
520.732 190.212 mo
520.732 112.783 li
547.175 112.783 li
547.175 190.212 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXB+DengXian-Regular gcheck setglobal} if
1 328 4 <000200b9ffb0050d0531000900110031bc000e0438000500000438b20a06
0d410a043d006c000603eb0005000e043d006c000503fa003f2b3f2b012f
ed2fed3031011402042321112120000310212311212000050da5fed0c9fe
4a0186015f016f88fdb5fb011f010201250280dcfeb8ac0581fea0feaf02
3ffb63013f00>XAHLXB+DengXian-Regular AddT42Char 
1 2318 18 <00020064ff9c03cd03be0015001b0048400f07151900460d15461a06060a
111900b80434b56c19190a1116410a0433006c001103f8000a0003043300
6c000a03fe003f2b3f2b12392f2b1112392f012fed2fed3210c630311314
1633323637170606232202113436363332121515012206072102e8a99765
91356546c489d9e86ec986d0dcfe4f8c9e08025e120199bfd55362377d6a
01140105a7ea78fef6f92201bcafaa015900>XAHLXB+DengXian-Regular AddT42Char 
1 1990 16 <00010064ff9c037c03be0015003ab9000f042f400b0314090a0a06131300
060d410a0433006c000603f8000000110433006c000003fe003f2b3f2b12
392f11392f012f332fed3031052202113412333216170726262320111021
323717020203cbd4ddcba1b71883137465fed80121d5237e3564010d0100
ff0116848d0f5f58fe59fe57c212fee7>XAHLXB+DengXian-Regular AddT42Char 
XAHLXB+DengXian-Regular /CharStrings get begin
/g4 4 def
/g18 18 def
/g16 16 def
end
XAHLXB+DengXian-Regular /Encoding get
dup 44 /g4 put
dup 45 /g18 put
dup 46 /g16 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXB+DengXian-Regular*1 [33{/.notdef}rp /g7 /g26 /g28 /g32 /g31 /g3 /g27 /g33 /g6 /g8 /g13 /g4 /g18 /g16 209{/.notdef}rp]XAHLXB+DengXian-Regular nfXAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf537.753 170.88 mo(,-.'"\()[-8.25005 -6.1261 -5.37003 -6.86998 -6.63004 0 ]ysh571.594 190.207 mo
571.594 112.778 li
598.037 112.778 li
598.037 190.207 li
cp
.0122683 .218173 .404089 0 cmyk
f
571.594 190.207 mo
571.594 112.778 li
598.037 112.778 li
598.037 190.207 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf588.615 162.48 mo(\)*+)[-8.12523 -5.62926 0 ]ysh.426368 .347875 .353155 .00985733 cmyk
%ADOBeginSubsetFont: MAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXC+DengXian-Regular gcheck setglobal} if
1 2464 17 <000100a5ffb003cd055d0017003fb20f0c08bb042f00090017042fb60010
0f0f09130a410a03e80000000903fd001300040433006c001303f8003f2b
3f333f1112392f33012fed2fed3232303105113426232206151123113311
1406073336363332161511034e7a8189a67f7f03020438a278afa9500254
b29fc6aafdcb05adfe6b376c376d63c9d2fd8d00>XAHLXC+DengXian-Regular AddT42Char 

1 0 1 <> XAHLXC+DengXian-Regular AddT42Char 
1 1362 10 <00020068ff9c03c40546001600220054b3170b051dbb0442001100000442
400a0b0b0b1406060314200eb80447b56c202003141a410a0447006c0014
03ef000300090447006c00030401003f2b3f2b12392f2b1112392f11392f
012fed2fedc410c530310110022320033716163320130606232226353436
33321207342623220615141633323603c4f0e8fedb4c781b835e014d0b29
b776b4d5e0c7d6df8da5868b999a8888a5028ffe8ffe7e01041a5c590266
566efdd4d7f7fea6a1b6dabca6abbfb1>XAHLXC+DengXian-Regular AddT42Char 
1 810 7 <00020075ff9c03cf0546001700240054b30c001f12bb0442000600000442
400a180d0d0912120309151bb80447b56c151503090f410a0447006c0009
03ef000300220447006c00030401003f2b3f2b12392f2b1112392f11392f
012fed2ffdc510c430310114022322021110123332161707262322020336
363332160734262322060615141633323603cfe0c0d7e3efe98eac277935
bba4ad0232ad6fb7d8809b8f50864da585899a017de0feff015e0156017a
017c7b821baefec9fed15e63edd5a3b94a8a5bb3e9c4>XAHLXC+DengXian-Regular AddT42Char 
1 3828 26 <0001001affb0057e03aa001a0025400a011217010d0505110901bb03f700
14000003fd003f323f33333911331139012f2f3031050133131617363637
1333131617363637133301230326270607030140feda7cb22a120d1828c4
6cc12e1a0f171db67bfecc7aca2c10142acf5003fafd8892713c537f026d
fd97967c465b650275fc0602838f676988fd7800>XAHLXC+DengXian-Regular AddT42Char 
1 620 6 <00010075ff9c03cf0531001d005cb40513160018bb044200130000044240
0d0c181814060614131303141b0fb80447b56c1b1b031417410a0447006c
001403ee000300090447006c00030401003f2b3f2b12392f2b1112392f11
392f11392f012fed2fed10c410c630310114062320033716163332363534
2623220607231321152103363633321603cfedd5feab437f1f8a7995a29f
8a517c3f772c02bcfdb62146874dbbdc0176e0fa013b147b69bcae95b131
3802e36cfe023327e700>XAHLXC+DengXian-Regular AddT42Char 
1 0 2 <0001009bffb003b30531000a003db900080442400f020402040209000903
030604040006b803eeb2080001bb0447006c00000400003f2b323f12392f
11392f012f2f1239392f2f10ed303117352111053525331121159b0168fe
be01506f0133506b0493d673e6faea6b>XAHLXC+DengXian-Regular AddT42Char 
1 106 3 <0001006fffb003c50546001c003db31c140e1abb0443000000140442b507
0d0d00110a410a0447006c001103ef0000001a0447006c00000400003f2b
3f2b12392f012fed2fedc410c43031173536363736363534262322060727
36363332161514060607040721156f2eafa9ae8b928276970d800fdfadbf
d640809afef24702c4505a74e59396ce71828d8b79109ec2c4af5a9e9d89
f0a47100>XAHLXC+DengXian-Regular AddT42Char 
1 2160 15 <00010064ff9c037c03be0015003ab9000f042f400b0314090a0a06131300
060d410a0433006c000603f8000000110433006c000003fe003f2b3f2b12
392f11392f012f332fed3031052202113412333216170726262320111021
323717020203cbd4ddcba1b71883137465fed80121d5237e3564010d0100
ff0116848d0f5f58fe59fe57c212fee7>XAHLXC+DengXian-Regular AddT42Char 
1 2604 18 <000100a0ffb003c2055e000b0035b50a01010b0703b8042fb704090b0701
040805bd03e9000803f70000000403fd003f333f3f11123939012f332fed
321239113330310501071123113311013301010327fe80887f7f01f1a0fe
4e01c45001fd7efe8105aefc5001fcfe53fdb300>XAHLXC+DengXian-Regular AddT42Char 
1 260 4 <00010055ff9c03c6054600280068b2252622b80442400d151c0f26151526
0f1c040b0500b80442400b0b1b1b1f0606031f25100fb80447b56c101003
1f18410a0447006c001f03ef000300080447006c00030401003f2b3f2b12
392f2b391112392f11392f012fed2f1217392f2f2f2f10ed113330310114
062320033712213236353426232335333236363534262322060727363633
32161514060715161603c6e4d0fe712e81230119959dbba9605d5e91548b
8779990d7e13dbb0bfd3948696a90134c2d6016d0efef19894848a753e79
5984907d810ba7b7c3b181b11d0413b3>XAHLXC+DengXian-Regular AddT42Char 
1 3968 27 <0001000fffb0037803aa000b002340090503090b0107030805bb03f70000
000303fd003f333f33123939012f332f3230310501012301013301013301
0102eafed7fed6880169fea88c011501148dfea9016d5001b7fe49020a01
f0fe62019efe12fdf400>XAHLXC+DengXian-Regular AddT42Char 
1 486 5 <0002002dffb003e40531000a000d0048b10801b80442b40d0202090cb804
42400b04090b060d0d0206000c04b80447b56c080c0c0206ba03ee000204
00003f3f12392f332b321112392f1139012f2fed12392f33ed3230310111
23112135013311331501012103257dfd85026f89bffec4fe0401fc0101fe
af01516403ccfc39690388fce100>XAHLXC+DengXian-Regular AddT42Char 
1 1104 9 <00030067ff9c03d005460019002500310070b516171a0a0920bb0442000d
00130442b61a0d1a0d1a262cbb0442000600000442400926170909160a0a
2329b80447b56c232303101d410a0447006c001003ef0003002f0447006c
00030401003f2b3f2b12392f2b391133331133012fed2fed1239392f2f10
ed10fdc43210c43230310114062322263534363735262635343633321615
140607151616033426232206151416333236133426232206151416333236
03d0e2d2d0e594786d80dab8bdda836c7c94a39085848d9182868d21a095
8fa29f9799970137c4d7d8c188bc18041db67b9fc4c5a07fb2180418b702
178284877f819390fdeb8699a0839aa4a300>XAHLXC+DengXian-Regular AddT42Char 
XAHLXC+DengXian-Regular /CharStrings get begin
/g17 17 def
/g1 1 def
/g10 10 def
/g7 7 def
/g26 26 def
/g6 6 def
/g2 2 def
/g3 3 def
/g15 15 def
/g18 18 def
/g4 4 def
/g27 27 def
/g5 5 def
/g9 9 def
end
XAHLXC+DengXian-Regular /Encoding get
dup 41 /g17 put
dup 42 /g1 put
dup 43 /g10 put
dup 44 /g7 put
dup 45 /g26 put
dup 46 /g6 put
dup 47 /g2 put
dup 48 /g3 put
dup 49 /g15 put
dup 50 /g18 put
dup 51 /g4 put
dup 52 /g27 put
dup 53 /g5 put
dup 54 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXC+DengXian-Regular*1 [33{/.notdef}rp /g11 /g20 /g24 /g25 /g13 /g21 /g23 /g19 /g17 /g1 /g10 /g7 /g26 /g6 /g2 /g3 /g15 /g18 /g4 /g27 /g5 /g9 201{/.notdef}rp]XAHLXC+DengXian-Regular nfXAHLXC+DengXian-Regular*1 [9 0 0 -9 0 0 ]msf77.2596 82.3199 mo(\)*)[5.00042 0 ]xsh84.7596 82.3199 mo(+,)[4.75013 0 ]xsh77.2596 91.2 mo(-*./0)[6.24957 2.49662 4.74654 4.74654 0 ]xsh77.2596 100.32 mo(1*/)[4.12473 2.49571 0 ]xsh115.217 81.84 mo(2*34+)[4.24981 2.50381 4.75374 3.99781 0 ]xsh115.217 90.96 mo(1*)[4.12473 0 ]xsh121.842 90.96 mo(30)[4.75013 0 ]xsh115.217 99.84 mo(#*/4)[3.62525 2.50021 4.75014 0 ]xsh130.092 99.84 mo(/)sh197.035 81.84 mo(2*)[4.2498 0 ]xsh203.785 81.84 mo(5)sh208.535 81.84 mo(4)sh212.535 81.84 mo(6)sh197.035 90.96 mo(1*)[4.12473 0 ]xsh203.66 90.96 mo(,)sh208.41 90.96 mo(5)sh197.035 99.84 mo(#*)[3.62524 0 ]xsh203.16 99.84 mo(0)sh207.91 99.84 mo(4)sh211.91 99.84 mo(0)sh241.695 81.84 mo(2*)[4.2498 0 ]xsh248.445 81.84 mo(5)sh253.195 81.84 mo(4)sh257.195 81.84 mo(6)sh241.695 90.96 mo(1*)[4.12473 0 ]xsh248.32 90.96 mo(/0)[4.75012 0 ]xsh257.82 90.96 mo(6)sh241.695 99.84 mo(#*)[3.62524 0 ]xsh247.82 99.84 mo(0)sh252.57 99.84 mo(4)sh256.57 99.84 mo(0)sh283.886 83.52 mo(2*)[4.24979 0 ]xsh290.636 83.52 mo(5)sh295.386 83.52 mo(4)sh299.386 83.52 mo(6)sh283.886 92.4 mo(1*)[4.12473 0 ]xsh290.511 92.4 mo(0.)[4.75012 0 ]xsh300.011 92.4 mo(,)sh283.886 101.52 mo(#*)[3.62524 0 ]xsh290.011 101.52 mo(0)sh294.761 101.52 mo(4)sh298.761 101.52 mo(0)sh328.644 82.8 mo(2*)[4.24979 0 ]xsh335.394 82.8 mo(3)sh340.144 82.8 mo(4)sh344.144 82.8 mo(.)sh328.644 91.92 mo(1*)[4.12473 0 ]xsh335.269 91.92 mo(0.)[4.75012 0 ]xsh344.769 91.92 mo(,)sh328.644 100.8 mo(#*)[3.62524 0 ]xsh334.769 100.8 mo(/)sh339.519 100.8 mo(4)sh343.519 100.8 mo(/)sh373.616 190.21 mo
373.616 112.781 li
400.059 112.781 li
400.059 190.21 li
cp
.301396 .0173037 .421912 0 cmyk
f
373.616 190.21 mo
373.616 112.781 li
400.059 112.781 li
400.059 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXB+DengXian-Regular gcheck setglobal} if
1 1126 11 <000200b9ffb004600531000800160044b50d090c000511bb043800120009
0438b3000c0510b8043eb56c0505130e12be03fa00130004043e006c0013
03eb003f2b3f3312392f2b32012fed2fed32123910c63031013426232111
213236371406070123012311231121321603a9bbacfefd010ba5ba88c5a6
019a9ffe7dff860196e5fd03a48b96fdb49e8f9ed217fd91025ffda10581
d200>XAHLXB+DengXian-Regular AddT42Char 
1 4018 30 <00010025ff9c030303be0029004cb31b000622bb042f00150000042f400d
0c102626181c1c18070703181f410a0434006c001803f80003000a043400
6c000303fe003f2b3f2b12392f11392f11391133012fed2fedc610c43031
25140623222627371616333235342e02272e023534363332161707262623
220615141616171e020303bdaba0b62075157774ec2b4b673c6e6f3ca6a1
92a11c7811675f6765274d8a87703fc9909d7184155354bf36442b1d101b
45684b87946c750e4b415951343e2b2525476900>XAHLXB+DengXian-Regular AddT42Char 
1 2862 21 <000100a5ffb003cd055d0017003fb20f0c08bb042f00090017042fb60010
0f0f09130a410a03e80000000903fd001300040433006c001303f8003f2b
3f333f1112392f33012fed2fed3232303105113426232206151123113311
1406073336363332161511034e7a8189a67f7f03020438a278afa9500254
b29fc6aafdcb05adfe6b376c376d63c9d2fd8d00>XAHLXB+DengXian-Regular AddT42Char 
1 1588 14 <00020059ff9c036803be000a0025005cb11f09bb042e0013000b042f400d
17040d1e1e220d0e0e0c221605b80435b46c1616220c410d03fd0022001b
0433006c002203f8001000000433006c001003fe003f2b3f2b3f12392f2b
111239113311392f012f3333ed2fedc43031253236363535070606151405
232723062322263534363737353426232206072736363332161501ba5889
4e92ccad028a79060467d99fadeff9a773796f71157820b39cbfab055391
507b04057273c155b5c99d8b9ea60704299089475419816abecf>XAHLXB+DengXian-Regular AddT42Char 
XAHLXB+DengXian-Regular /CharStrings get begin
/g11 11 def
/g30 30 def
/g21 21 def
/g14 14 def
end
XAHLXB+DengXian-Regular /Encoding get
dup 47 /g11 put
dup 48 /g30 put
dup 49 /g21 put
dup 50 /g14 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXB+DengXian-Regular*1 [33{/.notdef}rp /g7 /g26 /g28 /g32 /g31 /g3 /g27 /g33 /g6 /g8 /g13 /g4 /g18 /g16 /g11 /g30 /g21 /g14 205{/.notdef}rp]XAHLXB+DengXian-Regular nfXAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf390.637 173.28 mo(/-012#-)[-6.87476 -6.1189 -4.87086 -6.62283 -5.99889 -6.87486 0 ]ysh406.44 190.21 mo
406.44 112.781 li
432.883 112.781 li
432.883 190.21 li
cp
.473213 .543542 0 0 cmyk
f
406.44 190.21 mo
406.44 112.781 li
432.883 112.781 li
432.883 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXB+DengXian-Regular gcheck setglobal} if
1 1278 12 <0001004fff9c03c70546002a004cb31b000522bb0439001500000439400d
0c112626181c1c18060603181f410a043e006c001803ec00030009043e00
6c000303fb003f2b3f2b12392f11392f11391133012fed2fedc610c43031
01140623200337161633323635342e02272e023534363332161707262623
220615141616171e0303c7e6d2fe83437d1da086979f375e7f499a8b4cd2
bbb1cf277d1c937c808b366f90a6814c27012cbfd1015b1a8b7c92884e63
412a172f618f69abbc939b1f746d7e784b63462d35495974>XAHLXB+DengXian-Regular AddT42Char 
1 2486 19 <00010030ffb00267055d0015004bb11301b8042f400d06021502150c040c
0d0d050a02be03fd000a000f0434006c000a03e8b2000504b80433b26c13
05b803f7003f332b323f2b3f1112392f012f2f1239392f2f33ed32303101
112311233533353436333217152623220615153315015d7faeae898b4b2a
3934534adc0341fc6f03916974a39c0b6409727b6069>XAHLXB+DengXian-Regular AddT42Char 
1 3236 25 <0001009effb0062103be00260055b2151208b8042fb40909001811bb042f
00120026042f40090019201f0318181215b803f7b2000912b803fdb2041c
0db80433b26c221cb803f8003f332b323f33333f12392f1733012fed2fed
3212392fed10c63031051134262322061511231134262322061511231134
27331617333636333216173336333216151105a26d7e81947e6e7b7b9c7f
07720804043298778094160561eda49f500254b69bc598fdb80254b39ec7
a1fdc303175e85635f6d697b68e3c4d7fd8d>XAHLXB+DengXian-Regular AddT42Char 
1 4576 34 <0001000fffb0037803aa000b002340090503090b0107030805bb03f70000
000303fd003f333f33123939012f332f3230310501012301013301013301
0102eafed7fed6880169fea88c011501148dfea9016d5001b7fe49020a01
f0fe62019efe12fdf400>XAHLXB+DengXian-Regular AddT42Char 
XAHLXB+DengXian-Regular /CharStrings get begin
/g12 12 def
/g19 19 def
/g25 25 def
/g34 34 def
end
XAHLXB+DengXian-Regular /Encoding get
dup 51 /g12 put
dup 52 /g19 put
dup 53 /g25 put
dup 54 /g34 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXB+DengXian-Regular*1 [33{/.notdef}rp /g7 /g26 /g28 /g32 /g31 /g3 /g27 /g33 /g6 /g8 /g13 /g4 /g18 /g16 /g11 /g30 /g21 /g14 /g12 /g19 /g25 /g34 201{/.notdef}rp]XAHLXB+DengXian-Regular nfXAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf423.461 172.32 mo(3'4%526)[-6.12489 -6.88078 -3.49687 -3.88072 -10.1208 -6.0049 0 ]ysh.426368 .347875 .353155 .00985733 cmyk
XAHLXC+DengXian-Regular*1 [9 0 0 -9 0 0 ]msf476.82 82.3199 mo(2*)[4.24979 0 ]xsh483.57 82.3199 mo(3)sh488.32 82.3199 mo(4)sh492.321 82.3199 mo(.)sh476.82 91.4399 mo(1*)[4.12473 0 ]xsh483.445 91.4399 mo(0.)[4.75012 0 ]xsh492.945 91.4399 mo(,)sh476.82 100.32 mo(#*)[3.62524 0 ]xsh482.945 100.32 mo(/)sh487.695 100.32 mo(4)sh491.695 100.32 mo(/)sh495.187 151.495 mo
495.187 151.495 li
.776394 .626703 .405005 .218875 cmyk
@
.426368 .347875 .353155 .00985733 cmyk
XAHLXC+DengXian-Regular*1 [9 0 0 -9 0 0 ]msf523.325 84.24 mo(2*)[4.24976 0 ]xsh530.075 84.24 mo(5)sh534.825 84.24 mo(4)sh538.825 84.24 mo(5)sh523.325 93.1199 mo(1*)[4.12469 0 ]xsh529.95 93.1199 mo(/0)[4.75012 0 ]xsh539.45 93.1199 mo(6)sh523.325 102.24 mo(#*)[3.62524 0 ]xsh529.45 102.24 mo(0)sh534.2 102.24 mo(4)sh538.2 102.24 mo(0)sh495.187 151.495 mo
495.187 151.495 li
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: OAAAAA+DengXian-Bold Initial
ct_T42Dict begin
-0.172 -0.234 1.195 0.98
 256 array 0 1 255 {1 index exch /.notdef put} for  /OAAAAA+DengXian-Bold
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000008cc6670
676d000000000000098800000e79676c79660000000000001ddc000009f2
6865616400000000000018040000003668686561000000000000183c0000
0024686d74780000000000001860000000546c6f636100000000000018b4
0000002c6d61787000000000000018e0000000206e616d65000000000000
190000000028707265700000000000001928000004b36764697200000000
000000000000000005ec0017059a0018059a0018040000180000ffe80000
ffe80000ffe8fe29fff5059a00160000ffea000000eb00ee00c900c900e8
00b500b500ee00ca00c900d600f100e800b8fff500ce006300cf009b00a6
00b600ca00d500f5007b00ea00bc016800c900e6007600c500a900e40099
009000a401f50079009e00a900c100d200dc00e600ee00fa00c100c900d0
00ae00b700c400c900d700df00f100fa010500e000e800ed00a400ad00b8
00ce0063009800a000a700af00b600c800d400da00de00e400ee00f6007b
00d400e200ed00ab00b400bc00c6016800c100ce00e60076009900a800b3
00be00c500cb00d500e40077008d009c00a500ab00b500c2014801f50079
008f0095009b00a300a900b700c100d200da000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000055e
0005000005310015007805310015000000000000000000000000000003b1
00150078ffb0ffec0000ffb0ffec0000ffb0ffeb0000fe25000000000531
000cfcb2fff4000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000f100e600ec00d5000000aa
00b400a20093009b008400c50000000000000000000000000000000000f7
00ea00e400dc00c50000000000c200ca00b000a800b80092000000000000
000000000000000000e800ed00dd00f500d800000000000000b600c100ad
00a60087046400150079404927262587868584838281807f7e7d7c7b7a79
7877767574737271706f6e6d6c6b6a696867666564636261605f5e5d5c5b
5a5958575655545351504f4e4d4c4b4a49484746281f100a092c01b10b0a
432343650a2d2c00b10a0b4323430b2d2c01b00643b00743650a2d2cb04f
2b20b0405158214b525845441b2121591b2321b040b0042545b004254561
648a63525845441b212159592d2c00b00743b006430b2d2c4b53234b515a
5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b
515a58381b2121592d2c4b5458381b2121592d2cb002435458b0462b1b21
212121592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b
21212121592d2cb002435458b0492b1b212121592d2c2320b000508a8a64
b10003255458b0401bb10103255458b005438b59b04f2b5923b0622b2321
235865592d2cb108000c215460432d2cb10c000c215460432d2c012047b0
024320b8100062b81000635723b8010062b8100063575a58b02060665948
2d2cb1000225b00225b0022553b800352378b00225b0022560b020632020
b00625236250588a21b00160231b2020b00625236252582321b001611b8a
212321205959b8ffc11c60b0206323212d2cb1020042b123018851b14001
88535a58b910000020885458b202010243604259b12401885158b9200000
40885458b2020202436042b12401885458b2022002436042004b014b5258
b2020802436042591bb940000080885458b202040243604259b940000080
63b80100885458b202080243604259b94000010063b80200885458b20210
0243604259b12601885158b94000020063b80400885458b2024002436042
59b94000040063b80800885458b2028002436042595959595959b1000243
5458400a0540084009400c020d021bb10102435458b2054008ba01000009
0100b30c010d011bb18002435258b2054008b80180b109401bb2054008ba
01800009014059b9400000808855b94000020063b8040088555a58b30c00
0d011bb30c000d0159595942424242422d2c45b1024e2b23b04f2b20b040
5158214b5158b0022545b1014e2b60591b2321b003254520648a63b04053
58b1024e2b601b215959442d2c20b00050205823651b2359b114148a7045
b04f2b23b1610626602b8a58b005438b592358655923103a2d2cb0032549
63234660b04f2b23b00425b0042549b0032563562060b062602bb0032520
10468a4660b02063613a2d2cb00016b1020325b1010425013e003eb10102
060cb00a236542b00b2342b1020325b1010425013f003fb10102060cb006
236542b0072342b00116b100024354584523452018698a6323622020b040
5058671b665961b02063b0402361b00423421bb104004221215918012d2c
2045b1004e2b442d2c4b51b1404f2b505b582045b1014e2b208a8a4420b1
400426616361b1014e2b44211b23218a45b1014e2b208a234444592d2c4b
51b1404f2b505b5845208ab0406163601b23214559b1014e2b442d2c2345
208a4523612064b04051b0042520b0005323b040515a5ab1404f2b545a58
8a0c642364235358b140408a612063611b2063591b8a5963b1024e2b6044
2d2c012d2c002d2c05b10b0a432343650a2d2cb10a0b4323430b022d2cb0
02256366b00225b82000626023622d2cb0022563b0206066b00225b82000
626023622d2cb002256367b00225b82000626023622d2cb002256366b020
60b00225b82000626023622d2c234ab1024e2b2d2c234ab1014e2b2d2c23
8a4a234564b0022564b002256164b00343525821206459b1024e2b23b000
505865592d2c238a4a234564b0022564b002256164b00343525821206459
b1014e2b23b000505865592d2c20b003254ab1024e2b8a103b2d2c20b003
254ab1014e2b8a103b2d2cb00325b003258ab0672b8a103b2d2cb00325b0
03258ab0682b8a103b2d2cb0032546b003254660b004252eb00425b00425
b0042620b000505821b06a1bb06c592bb0032546b00325466061b0806220
8a2010233a232010233a2d2cb0032547b003254760b0052547b0806361b0
0225b00625496323b005254ab080632058621b2159b0042646608a468a46
60b02063612d2cb00426b00425b00425b00426b06e2b208a2010233a2320
10233a2d2c2320b001545821b00225b1024e2bb0805020605920606020b0
01515821211b20b005515821206661b0402361b100032550b00325b00325
505a5820b00325618a535821b000591b21591bb00754582066616523211b
2121b000595959b1024e2b2d2cb00225b004254ab0005358b0001b8a8a23
8ab00159b004254620666120b00526b0062649b00526b00526b0702b2361
65b02060206661b02061652d2cb0022546208a20b000505821b1024e2b1b
452321596165b00225103b2d2cb0042620b802006220b80200638a236120
b05d602bb00525118a128a20398a58ba005d10000004266356602b232120
10204620b1024e2b23611b2321208a201049b1024e2b593b2d2cba005d10
000009256356602bb00525b00525b00526b06d2bb15d0725602bb00525b0
0525b00525b00525b06f2bba005d10000008266356602b20b0005258b050
2bb00525b00525b00725b00725b00525b0712bb0021738b00052b00225b0
01525a58b00425b0062549b00325b00525496020b0405258211bb0005258
20b0025458b00425b00425b00725b0072549b00217381bb00425b00425b0
0425b0062549b0021738595959595921212121212d2cba005d1000000b25
6356602bb00725b00725b00625b00625b00c25b00c25b00925b00825b06e
2bb0041738b00725b00725b00726b06d2bb00425b00425b00426b06d2bb0
502bb00625b00625b00325b0712bb00525b00525b00325b002173820b006
25b00625b00525b0712b60b00625b00625b0042565b0021738b00225b002
256020b040535821b0406123b04061231bb8ffc05058b0406023b0406023
5959b00825b00825b00426b0021738b00525b005258ab002173820b00052
58b00625b0082549b00325b00525496020b0405258211bb0005258b00625
b00625b00625b00625b00b25b00b2549b0041738b00625b00625b00625b0
0625b00a25b00a25b00725b0712bb0041738b00425b00425b00525b00725
b00525b0712bb00217381bb00425b00425b9ffc000021738595959212121
21212121212d2cb00425b0032587b00325b003258a20b000505821b0651b
b068592b64b00425b0042506b00425b0042549202063b00325206351b100
0325545b5821212321071b2063b0022520636120b0532b8a63b00525b005
2587b00425b004264ab00050586559b00426200146230046b00526200146
230046b0001600b000234801b00023480020b0012348b00223480120b001
2348b002234823b2020001082338b2020001092338b1020107b00116592d
2c23100d0c8a63238a636064b940000400635058b000381b3c592d2cb006
25b00925b00925b00726b0762b23b0005458051b0459b00425b00626b077
2bb00525b00526b00525b00526b0762bb0005458051b0459b0772b2d2cb0
0725b00a25b00a25b00826b0762b8ab0005458051b0459b00525b00726b0
772bb00625b00626b00625b00626b0762b08b0772b2d2cb00725b00a25b0
0a25b00826b0762b8a8a08b00425b00626b0772bb00525b00526b00525b0
0526b0762bb0005458051b0459b0772b2d2cb00825b00b25b00b25b00926
b0762bb00426b0042608b00525b00726b0772bb00625b00626b00625b006
26b0762b08b0772b2d2c03b00325b003254ab00425b003254a02b00525b0
05264ab00526b005264ab00426638a8a63612d2cb15d0e25602bb00c2611
b0052612b00a2539b0072539b00a25b00a25b00925b07c2bb00050b00b25
b00825b00a25b07c2bb000505458b00725b00b2587b00425b004250bb00a
2510b00925c1b00225b002250bb0072510b00625c11bb00725b00b25b00b
25b9ffff00762bb00425b004250bb00725b00a25b0772bb00a25b00825b0
0825b9ffff00762bb00225b002250bb00a25b00725b0772b59b00a2546b0
0a254660b0082546b008254660b00625b006250bb00c25b00c25b00c2620
b000505821b06a1bb06c592bb00425b004250bb00925b00925b0092620b0
00505821b06a1bb06c592b23b00a2546b00a25466061b0206323b0082546
b00825466061b02063b1010c255458041b0559b00a262010b003253ab006
26b006260bb0072620108a3ab10107265458041b0559b005262010b00225
3a8a8a0b232010233a2d2c23b0015458b9000040001bb940000000598ab0
015458b9000040001bb94000000059b07d2b2d2c8a8a080d8ab0015458b9
000040001bb94000000059b07d2b2d2c08b0015458b9000040001bb94000
0000590db07d2b2d2cb00426b00426080db00426b00426080db07d2b2d2c
200146230046b00a43b00b438a632362612d2cb0092bb006252eb005257d
c5b00625b00525b0042520b000505821b06a1bb06c592bb00525b00425b0
032520b000505821b06a1bb06c592b18b00825b00725b00625b00a25b06f
2bb00625b00525b0042620b000505821b0661bb068592bb00525b00425b0
042620b000505821b0661bb068592b54587db0042510b00325c5b0022510
b00125c5b0052621b00526211bb00626b00425b00325b00826b06f2b59b1
00024354587db00225b0822bb00525b0822b20206961b00443012361b060
60206961b0206120b00826b008268ab00217388a8a6120696161b0021738
1b2121212159182d2c4b52b1010243535a58231020013c003c1b2121592d
2c23b00225b00225535820b00425583c1b3959b00160b8ffe91c59212121
2d2cb0022547b0022547548a20201011b001608a2012b00161b0852b2d2c
b0042547b002254754232012b001612320b0062620201011b00160b00626
b0852b8a8ab0852b2d2cb00243b001525821212121211b462346608a8a46
2320468a608a61b8ff8062232010238ab10c0c8a70456020b0005058b001
61b8ffba8b1bb0468c59b0106068013a592d2c2045b0032546524bb01351
5b58b0022546206861b00325b003253f2321381b2111592d2c2045b00325
465058b0022546206861b00325b003253f2321381b2111592d0000000001
00000001214861c983505f0f3cf5001b080000000000cc3d466700000000
d194bf20fe9dfe1e099307db00010014000200000000000000010000067b
fe25000009d9fe9dfe230993000100000000000000000000000000000015
0800000002330000034fffed04f8006705bd00b0040500af0594006704fb
00af042d004c03c300560440005702c20032021700980433009602170098
0716008f04ab008f04c7005602f6008f0373002e02e4002d000000000000
00160061009e00cf0129017301d8021d027702ba02e203190331039303d7
0419045804bb04f9000100000015023600310042000700020010002f0088
0000039f0e79000400010000000100120001000000000006001400005443
464847572b44656e675869616e2d426f6c640000411a0409006404080055
0408005904080001040600550407006404060055040600590461045e002d
001f0460045e0037001f045f045eb23c1f284112045e0038045e0002045a
0456002f001f04590456003c001f045804560050001f04570456b2781f58
4121045600e80456000200480456000104010033040000550400005903ef
003303ee005503ee0059044d0449002c001f044c0449002c001f044b0449
0029001f044a0449b2461f77411004490001044604420011001f04450442
002c001f044404420032001f04430442b23c1f4741250442000100c70442
0001046500010463005504640033046300550463005903fb003303fa0055
03fa005903ed000103eb005503ec003303eb005503eb0059005904390069
043900020438b24b281fb80437b24b241fb80436b24b241fb80435b24b3c
1fb80434b34b3c1f88ba043300010431b246221fb80430b246781fb8042f
b2463c1f411904040064040300550403005903fe003303fd005503fd0059
03f9000103f7005503f8003303f7005503f7005903e900c803e840ff5564
598b3f801f8a3fff1f893eff1f883e671f873dff1f863dab1f853cff1f84
3cab1f833c561f823bff1f813aff1f8037061f7f39231f7e39401f7d39ab
1f7c39ff1f7b39721f7a38ff1f79382f1f7836ff1f7734401f7634931f75
34ff1f7434ab1f73355e1f7235ff1f7135401f7033ff1f6f32ff1f6e31cd
1f6d31801f6c30ff1f6b2f671f6a2fff1f692f801f682f3d1f672eff1f66
2e671f652e2f1f642dff1f632cff1f622c931f612a281f602b721f5f2bab
1f5e2bff1f5d2aff1f5c29ff1f5b29931f5a28ff1f5928931f5827ff1f57
25ff1f5624ff1f5522ff1f5423ff1f5323721f5221cd1f5121ff1f502180
1f4f20341f4e20ab1f4d20ff1f40f34c1f721f4b1fff1f4a1eff1f491ecd
1f481e401f471e281f461dab1f451dff1f441d721f431c561f421cff1f41
1c801f401c391f3f3e3d1f3e3c1e1f3d3c4a1f3938341f3837721f363423
1f3534251f2c2a181f2b2a561f2a26cd1f2928401f28275e1f2726141f26
201b195c251b0d1f241f1a195c235e225522031a195c2119ff1f2016ff1f
1f1e4f1f1e18ff1f1d0117165c1c16ff1f1b3119165b1836161f5b1a3119
165b1736161f5b15193e16a85a132f1255112f1055125910590d2b0c5505
2b04550c5904590f5e0e550b2b0a55072b0655012d00550e590a59065900
59092b0855032b0255085902590340400501b9019000542b4bb807ff524b
b008505bb00188b02553b00188b040515ab00688b000555a5b58b101018e
59858d8d001d424bb0905358b20300001d4259b10202435158b104038e59
002b002b2b2b002b002b002b002b2b2b2b2b002b002b2b2b002b002b2b2b
012b012b012b012b012b012b002b002b2b2b012b002b002b002b2b012b2b
2b2b2b2b2b012b2b002b2b2b2b2b012b2b2b2b002b2b2b2b2b2b2b2b2b2b
2b2b012b2b2b002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b00
2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b002b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b002b2b002b2b2b002b2b002b2b012b2b2b00732b2b2b
2b2b73002b2b2b002b2b002b2b2b0173742b2b2b2b00732b2b2b2b002b2b
002b2b0173742b2b2b2b00742b2b2b002b2b2b002b2b180000>
[2547 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 414 6 <00010067ff9c05150546001b0051b509191616140fbb0442000300190444
b6140a0a00061716b8044bb56c171700060c410a0449006c000603ec0000
00120449006c000003fb003f2b3f2b12392f2b1112392f012fed2fed1239
2f10c4303105200011100021320417072623220215141233323735213521
11060402eafecefeaf014a0132d301103fe04ef7bec5d3bcc382feb40230
5dfed8640181015a015c0173a7ab44d4fef1fefefee47cf8b3fdfe697d00
>OAAAAA+DengXian-Bold AddT42Char 
1 1082 10 <00020057ff9c03f703c60015001c004db307151900bb042e000e0015042e
b61a06060b111900b80436b56c19190b1116410a0435006c001103f8000b
00030435006c000b03fe003f2b3f2b12392f2b1112392f012fed2fed3210
c6303101161633323637170e022322021110003332121115012206072126
2601480581704c7730b53b769d6ce1f40100dddbe8fe3565780501be0a68
01859da94c5a575f6231011b01000102010dfee1fefa1c01a2907f888700
>OAAAAA+DengXian-Bold AddT42Char 
1 1830 16 <0001008fffb0042103c60017003db10f08b8042fb20c0917b8042fb50010
0f0f090c410a03f70000000903fd001300040434006c001303f8003f2b3f
333f12392f33012fed2f33ed323031051134262322061511231134273316
153336363332161511033a61697181e609db0b043b9c7babab50023d9c88
ae95fde20315777596307368cad3fd87>OAAAAA+DengXian-Bold AddT42Char 
1 2098 18 <0001008fffb002db03c60013003bb2080b04b8042fb605110c0b0b0508bd
03f7000503fd000f00120439b26c0f00bb0439006c000f03f8003f2b2b3f
3f12392f33012f2fed32c630310122061511231134273316153336363332
17152602727086e607db0a04307e672f1f330307c5a7fe150304a25b7870
8e6f0dbd0b00>OAAAAA+DengXian-Bold AddT42Char 
1 742 8 <0002004cff9c03a303c600090024005ab11e08bb042e0012000a042f400c
16030c1d1d210c0c0b211604b80438b46c1616210b410d03fd0021001a04
37006c002103f8000f00000435006c000f03fe003f2b3f2b3f12392f2b11
12392f11392f012f3333ed2fedc430312532363535070606151405232706
062322263534363737353426232206072736363332161501d76b7c6d9381
0266de083390699ea7e4deaf4d5c514d0ede1ebfb0cdbf3e95755d04075a
60a28ea26452a492a0aa070620776b3d40238372c2cc>OAAAAA+DengXian-Bold AddT42Char 
1 2422 20 <0001002dff9e02ad04a90014003bb2050a0eb8042f400907030c1208060d
0605b80433b26c0a06be03f7000000100433006c000003fe003f2b3f332b
3210c6012f332f33ed32c630310522263511233533373315331523111433
3237150601c7788b979a4999f7f7813d46726289800263a7f8f8a7fdd798
0d9a1e00>OAAAAA+DengXian-Bold AddT42Char 
1 1966 17 <00020056ff9c047103c6000b00140031bc0010042e00060000042eb20c09
0e410a0433006c000903f8000300130433006c000303fe003f2b3f2b012f
ed2fed30310114002322003534003320000310212011141633200471fee9
fcf4feec0115f90101010cf1fee9fede8e87012401b3fbfee40120f7fb01
18feeffefe0169fe97b1bc00>OAAAAA+DengXian-Bold AddT42Char 

1 0 0 <> OAAAAA+DengXian-Bold AddT42Char 
OAAAAA+DengXian-Bold /CharStrings get begin
/g6 6 def
/g10 10 def
/g16 16 def
/g18 18 def
/g8 8 def
/g20 20 def
/g17 17 def
end
OAAAAA+DengXian-Bold /Encoding get
dup 33 /g6 put
dup 34 /g10 put
dup 35 /g16 put
dup 36 /g18 put
dup 37 /g8 put
dup 38 /g20 put
dup 39 /g17 put
pop
end
%ADOEndSubsetFont
/XAHLXD+DengXian-Bold /OAAAAA+DengXian-Bold findfont ct_VMDictPut/XAHLXD+DengXian-Bold*1 [33{/.notdef}rp /g6 /g10 /g16 /g18 /g8 /g20 /g17 216{/.notdef}rp]XAHLXD+DengXian-Bold nfXAHLXD+DengXian-Bold*1 [11 0 0 -11 0 0 ]msf87.891 45.1199 mo(!"#"$%&'$)[7.62527 5.87626 6.37112 5.87626 4.12715 5.75523 3.99511 6.62419 0 ]xsh87.581 47.1 mo
104.581 47.1 li
121.581 47.1 li
138.581 47.1 li
138.581 48.1 li
121.581 48.1 li
104.581 48.1 li
87.581 48.1 li
cp
ef
529.425 151.495 mo
529.425 151.495 li
.776394 .626703 .405005 .218875 cmyk
@
529.425 151.495 mo
529.425 151.495 li
@
.426368 .347875 .353155 .00985733 cmyk
XAHLXC+DengXian-Regular*1 [9 0 0 -9 0 0 ]msf605.718 83.9999 mo(2*)[4.24976 0 ]xsh612.468 83.9999 mo(5)sh617.218 83.9999 mo(4)sh621.218 83.9999 mo(5)sh605.718 93.1199 mo(1*)[4.12469 0 ]xsh612.343 93.1199 mo(,)sh617.093 93.1199 mo(5)sh605.718 102 mo(#*)[3.62524 0 ]xsh611.843 102 mo(0)sh616.593 102 mo(4)sh620.593 102 mo(0)sh529.425 151.495 mo
529.425 151.495 li
.776394 .626703 .405005 .218875 cmyk
@
529.43 151.495 mo
529.43 151.495 li
@
555.873 151.495 mo
555.873 151.495 li
@
529.43 151.495 mo
529.43 151.495 li
@
544.079 151.495 mo
544.079 151.495 li
@
.426368 .347875 .353155 .00985733 cmyk
XAHLXC+DengXian-Regular*1 [9 0 0 -9 0 0 ]msf651.878 83.52 mo(2*)[4.24976 0 ]xsh658.628 83.52 mo(5)sh663.378 83.52 mo(4)sh667.378 83.52 mo(5)sh651.878 92.4 mo(1*)[4.12469 0 ]xsh658.503 92.4 mo(3)sh663.253 92.4 mo(0)sh651.878 101.52 mo(#*)[3.62524 0 ]xsh658.003 101.52 mo(0)sh662.753 101.52 mo(4)sh666.753 101.52 mo(0)sh567.099 151.495 mo
567.099 151.495 li
.776394 .626703 .405005 .218875 cmyk
@
544.079 151.495 mo
544.079 151.495 li
@
695.185 190.21 mo
695.185 112.781 li
721.629 112.781 li
721.629 190.21 li
cp
.325963 .164797 0 0 cmyk
f
695.185 190.21 mo
695.185 112.781 li
721.629 112.781 li
721.629 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf712.207 164.88 mo(&'"\()[-7.49995 -6.87598 -6.62402 0 ]ysh729.082 190.648 mo
729.082 113.218 li
755.525 113.218 li
755.525 190.648 li
cp
.0806592 .0636606 .0646372 0 cmyk
f
729.082 190.648 mo
729.082 113.218 li
755.525 113.218 li
755.525 190.648 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXB+DengXian-Regular gcheck setglobal} if
1 842 9 <0002006dff9c05a10546000e001a0031bc00150438000800000438b20f0b
12410a043d006c000b03ec00040018043d006c000403fb003f2b3f2b012f
ed2fed303101140204232224023510002132041207100023220011100033
320005a1a3fed3cbcffed49e0161013acd012ca08afeeaf9fcfeea011bf5
fe01130277dbfeb2b2b2014ddc0150017facfeb8db01190144fec1fee2fe
e3feb3014600>XAHLXB+DengXian-Regular AddT42Char 
XAHLXB+DengXian-Regular /CharStrings get begin
/g9 9 def
end
XAHLXB+DengXian-Regular /Encoding get
dup 55 /g9 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXB+DengXian-Regular*1 [33{/.notdef}rp /g7 /g26 /g28 /g32 /g31 /g3 /g27 /g33 /g6 /g8 /g13 /g4 /g18 /g16 /g11 /g30 /g21 /g14 /g12 /g19 /g25 /g34 /g9 200{/.notdef}rp]XAHLXB+DengXian-Regular nfXAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf746.103 170.4 mo(7$%#$%)[-9.12485 -6.62874 -3.88072 -6.86887 -6.62874 0 ]ysh618.542 190.21 mo
618.542 112.781 li
630.896 112.781 li
630.896 190.21 li
cp
0 .720699 .0347295 0 cmyk
f
618.542 190.21 mo
618.542 112.781 li
630.896 112.781 li
630.896 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
637.253 151.497 mo
637.252 151.497 li
@
637.253 151.497 mo
637.252 151.497 li
@
637.253 151.497 mo
637.252 151.497 li
@
605.926 190.211 mo
605.926 112.781 li
618.542 112.781 li
618.542 190.211 li
cp
.325963 .164797 0 0 cmyk
f
605.926 190.211 mo
605.926 112.781 li
618.542 112.781 li
618.542 190.211 li
cp
.776394 .626703 .405005 .218875 cmyk
@
630.896 190.207 mo
630.896 112.78 li
642.984 112.78 li
642.984 190.207 li
cp
.0122683 .218173 .404089 0 cmyk
f
630.896 190.207 mo
630.896 112.78 li
642.984 112.78 li
642.984 190.207 li
cp
.776394 .626703 .405005 .218875 cmyk
@
637.257 151.497 mo
637.257 151.497 li
@
637.257 151.497 mo
637.257 151.497 li
@
.426368 .347875 .353155 .00985733 cmyk
%ADOBeginSubsetFont: MAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXC+DengXian-Regular gcheck setglobal} if
1 1012 8 <0001006affb003ca0531000a0029b40404070800410a0442000700040400
000900080447006c000903ee003f2b3f012fed2f12392f30310102021123
10121321352103caf1e082efe6fd1e036004c3fe87fd82fee40118029101
6672>XAHLXC+DengXian-Regular AddT42Char 
XAHLXC+DengXian-Regular /CharStrings get begin
/g8 8 def
end
XAHLXC+DengXian-Regular /Encoding get
dup 55 /g8 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXC+DengXian-Regular*1 [33{/.notdef}rp /g11 /g20 /g24 /g25 /g13 /g21 /g23 /g19 /g17 /g1 /g10 /g7 /g26 /g6 /g2 /g3 /g15 /g18 /g4 /g27 /g5 /g9 /g8 200{/.notdef}rp]XAHLXC+DengXian-Regular nfXAHLXC+DengXian-Regular*1 [9 0 0 -9 0 0 ]msf695.388 83.9999 mo(2*)[4.24976 0 ]xsh702.138 83.9999 mo(7)sh706.888 83.9999 mo(4)sh710.888 83.9999 mo(7)sh695.388 93.1199 mo(1*)[4.12469 0 ]xsh702.013 93.1199 mo(/)sh695.388 102 mo(#*)[3.62524 0 ]xsh701.513 102 mo(/)sh706.263 102 mo(4)sh710.263 102 mo(/)sh372.723 83.52 mo(\)*)[5.0004 0 ]xsh380.223 83.52 mo(/)sh384.973 83.52 mo(0)sh372.723 92.4 mo(-*)[6.24954 0 ]xsh381.473 92.4 mo(,)sh386.223 92.4 mo(5)sh372.723 101.52 mo(1*)[4.12473 0 ]xsh379.348 101.52 mo(0.)[4.75012 0 ]xsh388.848 101.52 mo(,)sh407.815 82.5599 mo(\)*)[5.0004 0 ]xsh415.315 82.5599 mo(+)sh420.065 82.5599 mo(,)sh407.815 91.68 mo(-*)[6.24954 0 ]xsh416.565 91.68 mo(,)sh421.315 91.68 mo(5)sh407.815 100.56 mo(1*)[4.12473 0 ]xsh414.44 100.56 mo(3)sh419.19 100.56 mo(0)sh663.677 190.21 mo
663.677 112.781 li
676.031 112.781 li
676.031 190.21 li
cp
0 .720699 .0347295 0 cmyk
f
663.677 190.21 mo
663.677 112.781 li
676.031 112.781 li
676.031 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
682.387 151.497 mo
682.387 151.497 li
@
682.387 151.497 mo
682.387 151.497 li
@
682.387 151.497 mo
682.387 151.497 li
@
651.06 190.211 mo
651.06 112.781 li
663.677 112.781 li
663.677 190.211 li
cp
.325963 .164797 0 0 cmyk
f
651.06 190.211 mo
651.06 112.781 li
663.677 112.781 li
663.677 190.211 li
cp
.776394 .626703 .405005 .218875 cmyk
@
676.031 190.207 mo
676.031 112.78 li
688.118 112.78 li
688.118 190.207 li
cp
.0122683 .218173 .404089 0 cmyk
f
676.031 190.207 mo
676.031 112.78 li
688.118 112.78 li
688.118 190.207 li
cp
.776394 .626703 .405005 .218875 cmyk
@
682.392 151.497 mo
682.392 151.497 li
@
682.392 151.497 mo
682.392 151.497 li
@
438.548 190.21 mo
438.548 112.781 li
466.65 112.781 li
466.65 190.21 li
cp
.301396 .0173037 .421912 0 cmyk
f
438.548 190.21 mo
438.548 112.781 li
466.65 112.781 li
466.65 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: MAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXC+DengXian-Regular gcheck setglobal} if
1 1606 12 <000200b9ffb004600531000800160044b50d090c000511bb043800120009
0438b3000c0510b8043eb56c0505130e12be03fa00130004043e006c0013
03eb003f2b3f3312392f2b32012fed2fed32123910c63031013426232111
213236371406070123012311231121321603a9bbacfefd010ba5ba88c5a6
019a9ffe7dff860196e5fd03a48b96fdb49e8f9ed217fd91025ffda10581
d200>XAHLXC+DengXian-Regular AddT42Char 
1 2296 16 <00020064ff9c03cd03be0015001b0048400f07151900460d15461a06060a
111900b80434b56c19190a1116410a0433006c001103f8000a0003043300
6c000a03fe003f2b3f2b12392f2b1112392f012fed2fed3210c630311314
1633323637170606232202113436363332121515012206072102e8a99765
91356546c489d9e86ec986d0dcfe4f8c9e08025e120199bfd55362377d6a
01140105a7ea78fef6f92201bcafaa015900>XAHLXC+DengXian-Regular AddT42Char 
1 3186 22 <0002009efe25043403be001800240051b60f0a1f0712040bb8042f400c0c
00461907070f131212030f410f03f7000c04030016001c0433006c001603
f8000300220433006c000303fe003f2b3f2b3f3f12392f3311392f012fed
2fed1732c630310114022322262723161615112311342733161533363633
32120734262322061514163332360434edd079a3370402027f07770b043c
ac7fccdd839c9eaaaba6a4a1a401b1f7fee25b6529522bfe6f04ad6c6c6c
506f61fef0ffcadcdbcecfd8dc00>XAHLXC+DengXian-Regular AddT42Char 
1 1964 14 <0002009eff9c0434055d001800240052b50a0f1f120307b8042f400d0c00
46190707161312120a160d410f03e8000a03fd0016001c0433006c001603
f8000300220433006c000303fe003f2b3f2b3f3f1112392f3311392f012f
ed2fed1732c6303101140223222627231607233635113311140607333636
3332120734262322061514163332360434ead478a33704010a79077f0202
0442a97ccbde83a09ba9aba8a4a1a201b1fcfee761663182696e04d6fe15
204120735afeebf8cfd5dbd1cfd5db00>XAHLXC+DengXian-Regular AddT42Char 
XAHLXC+DengXian-Regular /CharStrings get begin
/g12 12 def
/g16 16 def
/g22 22 def
/g14 14 def
end
XAHLXC+DengXian-Regular /Encoding get
dup 56 /g12 put
dup 57 /g16 put
dup 58 /g22 put
dup 59 /g14 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXC+DengXian-Regular*1 [33{/.notdef}rp /g11 /g20 /g24 /g25 /g13 /g21 /g23 /g19 /g17 /g1 /g10 /g7 /g26 /g6 /g2 /g3 /g15 /g18 /g4 /g27 /g5 /g9 /g8 /g12 /g16 /g22 /g14 196{/.notdef}rp]XAHLXC+DengXian-Regular nfXAHLXC+DengXian-Regular*1 [0 -9 -9 0 0 0 ]msf455.199 187.44 mo(89#\)%:9)[-5.24966 -4.62877 -3.62076 -4.99773 -4.50276 -5.12375 0 ]ysh455.199 152.16 mo(;%12)[-5.12465 -4.50366 -4.12563 0 ]ysh.426368 .347875 .353155 .00985733 cmyk
XAHLXC+DengXian-Regular*1 [9 0 0 -9 0 0 ]msf439.422 84.24 mo(\)*)[5.0004 0 ]xsh446.922 84.24 mo(+)sh451.672 84.24 mo(,)sh439.422 93.1199 mo(-*)[6.24954 0 ]xsh448.172 93.1199 mo(,)sh452.922 93.1199 mo(5)sh439.422 102.24 mo(1*)[4.12473 0 ]xsh446.047 102.24 mo(3)sh450.797 102.24 mo(0)sh487.389 190.21 mo
487.389 112.781 li
499.744 112.781 li
499.744 190.21 li
cp
0 .720699 .0347295 0 cmyk
f
487.389 190.21 mo
487.389 112.781 li
499.744 112.781 li
499.744 190.21 li
cp
.776394 .626703 .405005 .218875 cmyk
@
506.1 151.497 mo
506.1 151.497 li
@
506.1 151.497 mo
506.1 151.497 li
@
506.1 151.497 mo
506.1 151.497 li
@
474.773 190.211 mo
474.773 112.781 li
487.389 112.781 li
487.389 190.211 li
cp
.325963 .164797 0 0 cmyk
f
474.773 190.211 mo
474.773 112.781 li
487.389 112.781 li
487.389 190.211 li
cp
.776394 .626703 .405005 .218875 cmyk
@
499.744 190.207 mo
499.744 112.78 li
511.831 112.78 li
511.831 190.207 li
cp
.0122683 .218173 .404089 0 cmyk
f
499.744 190.207 mo
499.744 112.78 li
511.831 112.78 li
511.831 190.207 li
cp
.776394 .626703 .405005 .218875 cmyk
@
506.104 151.497 mo
506.104 151.497 li
@
506.104 151.497 mo
506.104 151.497 li
@
2 lw
0 lj
8 ml
103.832 151.495 mo
115.8 151.496 li
.75021 .679683 .670222 .90164 cmyk
@
192.409 151.494 mo
197.542 151.497 li
@
234.6 151.494 mo
240.537 151.497 li
@
277.595 151.494 mo
285.228 151.497 li
@
322.285 151.494 mo
329.115 151.497 li
@
366.173 151.495 mo
373.616 151.496 li
@
400.059 151.495 mo
406.439 151.495 li
@
432.883 151.495 mo
438.548 151.495 li
@
511.831 151.493 mo
520.732 151.498 li
@
598.037 151.494 mo
605.926 151.497 li
@
642.984 151.494 mo
651.06 151.497 li
@
688.118 151.495 mo
695.185 151.496 li
@
466.65 151.495 mo
474.773 151.496 li
@
721.643 151.246 mo
724.105 151.39 li
724.076 151.89 li
721.614 151.745 li
cp
723.268 148.587 mo
729.082 151.933 li
722.916 154.576 li
cp
f
408.195 282.429 mo
408.195 205 li
434.638 205 li
434.638 282.429 li
cp
.0806592 .0636606 .0646372 0 cmyk
f
.75 lw
1 lj
10 ml
408.195 282.429 mo
408.195 205 li
434.638 205 li
434.638 282.429 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXB+DengXian-Regular gcheck setglobal} if
1 46 2 <00020018ffb005000531000700110034b60c0d0704070c02b8043db56c0c
0c050004b803fab2110508bb043d006c000503eb003f2b323f3312392f2b
012f2f12393930310503210323013301010606070321032626270473a9fd
85a98e02269f0223fd8b132c17c0022fbe172c145001b8fe480581fa7f05
123e7c3dfe0c01f53e7a3e00>XAHLXB+DengXian-Regular AddT42Char 
1 3902 29 <000100a0ffb0029403be00130034b2030613b8042fb6000c070606000341
0903f7000003fd000a000f0433006c000a03f8003f2b3f3f12392f33012f
2fed32c630311711342733161533363633321715262322061511a909760b
042a8a6d2a2426397e8e5002fe51ab6e798774097609d7bcfdfb>XAHLXB+DengXian-Regular AddT42Char 
1 3002 22 <000200a5ffb00124055e000300070026b10307b8042fb5000400000501bc
03e9000503f7000403fd003f3f3f12392f012f33ed323031133533150311
3311a57f7f7f04c39b9bfaed03fafc06>XAHLXB+DengXian-Regular AddT42Char 
1 1794 15 <0002009eff9c0434055d001800240052b50a0f1f120307b8042f400d0c00
46190707161312120a160d410f03e8000a03fd0016001c0433006c001603
f8000300220433006c000303fe003f2b3f2b3f3f1112392f3311392f012f
ed2fed1732c6303101140223222627231607233635113311140607333636
3332120734262322061514163332360434ead478a33704010a79077f0202
0442a97ccbde83a09ba9aba8a4a1a201b1fcfee761663182696e04d6fe15
204120735afeebf8cfd5dbd1cfd5db00>XAHLXB+DengXian-Regular AddT42Char 
XAHLXB+DengXian-Regular /CharStrings get begin
/g2 2 def
/g29 29 def
/g22 22 def
/g15 15 def
end
XAHLXB+DengXian-Regular /Encoding get
dup 56 /g2 put
dup 57 /g29 put
dup 58 /g22 put
dup 59 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXB+DengXian-Regular*1 [33{/.notdef}rp /g7 /g26 /g28 /g32 /g31 /g3 /g27 /g33 /g6 /g8 /g13 /g4 /g18 /g16 /g11 /g30 /g21 /g14 /g12 /g19 /g25 /g34 /g9 /g2 /g29 /g22 /g15 196{/.notdef}rp]XAHLXB+DengXian-Regular nfXAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf425.216 266.64 mo(8%%9:;$%-)[-7.62485 -3.88069 -3.88072 -4.12085 -2.62079 -6.86887 -6.62874 -3.88072 0 ]ysh2 lw
0 lj
8 ml
434.638 243.715 mo
637.118 243.715 li
@
1.5 lw
461.009 244.771 mo
474.773 151.496 li
@
507.628 243.363 mo
520.753 151.496 li
@
592.135 243.363 mo
605.433 151.496 li
@
638.427 244.771 mo
650.928 151.496 li
@
.426368 .347875 .353155 .00985733 cmyk
XAHLXC+DengXian-Regular*1 [9 0 0 -9 0 0 ]msf466.9 213.6 mo(\)*)[5.0004 0 ]xsh474.4 213.6 mo(/)sh479.15 213.6 mo(0)sh466.9 222.48 mo(-*)[6.24954 0 ]xsh475.65 222.48 mo(,5)[4.75012 0 ]xsh466.9 231.6 mo(1*)[4.12473 0 ]xsh473.525 231.6 mo(/)sh478.275 231.6 mo(,)sh514.421 213.6 mo(\)*)[5.00037 0 ]xsh521.921 213.6 mo(0)sh526.671 213.6 mo(5)sh514.421 222.48 mo(-*)[6.24951 0 ]xsh523.171 222.48 mo(/0)[4.75012 0 ]xsh532.671 222.48 mo(6)sh514.421 231.6 mo(1*)[4.12469 0 ]xsh521.046 231.6 mo(/)sh525.796 231.6 mo(,)sh599.356 214.08 mo(\)*)[5.00037 0 ]xsh606.856 214.08 mo(5)sh611.606 214.08 mo(6)sh599.356 223.2 mo(-*)[6.24951 0 ]xsh608.106 223.2 mo(0.)[4.75012 0 ]xsh617.606 223.2 mo(,)sh599.356 232.08 mo(1*)[4.12469 0 ]xsh605.981 232.08 mo(/)sh610.731 232.08 mo(,)sh648.031 213.6 mo(\)*)[5.00037 0 ]xsh655.531 213.6 mo(+)sh660.281 213.6 mo(,)sh648.031 222.48 mo(-*)[6.24951 0 ]xsh656.781 222.48 mo(./)[4.75012 0 ]xsh666.281 222.48 mo(0)sh648.031 231.6 mo(1*)[4.12469 0 ]xsh654.656 231.6 mo(/)sh659.406 231.6 mo(,)sh729.646 83.52 mo(\)*)[5.00037 0 ]xsh737.146 83.52 mo(+,)[4.75012 0 ]xsh729.646 92.4 mo(-*./0)[6.24951 2.49664 4.74652 4.74658 0 ]xsh729.646 101.52 mo(1*/)[4.12469 2.49573 0 ]xsh222.756 412.879 mo
222.756 335.45 li
235.11 335.45 li
235.11 412.879 li
cp
0 .720699 .0347295 0 cmyk
f
.75 lw
1 lj
10 ml
222.756 412.879 mo
222.756 335.45 li
235.11 335.45 li
235.11 412.879 li
cp
.776394 .626703 .405005 .218875 cmyk
@
210.14 412.88 mo
210.14 335.45 li
222.756 335.45 li
222.756 412.88 li
cp
.325963 .164797 0 0 cmyk
f
210.14 412.88 mo
210.14 335.45 li
222.756 335.45 li
222.756 412.88 li
cp
.776394 .626703 .405005 .218875 cmyk
@
235.11 412.876 mo
235.11 335.449 li
247.198 335.449 li
247.198 412.876 li
cp
.0122683 .218173 .404089 0 cmyk
f
235.11 412.876 mo
235.11 335.449 li
247.198 335.449 li
247.198 412.876 li
cp
.776394 .626703 .405005 .218875 cmyk
@
76.4011 508.5 mo
76.4011 431.071 li
102.844 431.071 li
102.844 508.5 li
cp
.0806592 .0636606 .0646372 0 cmyk
f
76.4011 508.5 mo
76.4011 431.071 li
102.844 431.071 li
102.844 508.5 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf93.4226 492.48 mo(8%%9:;$%-)[-7.62485 -3.88071 -3.88071 -4.12085 -2.62079 -6.86887 -6.62875 -3.88071 0 ]ysh75.5018 412.878 mo
75.5018 335.449 li
101.945 335.449 li
101.945 412.878 li
cp
.0806592 .0636606 .0646372 0 cmyk
f
75.5018 412.878 mo
75.5018 335.449 li
101.945 335.449 li
101.945 412.878 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf92.5233 387.6 mo(!"#$%)[-2.99994 -6.62405 -6.87604 -6.62396 0 ]ysh149.999 412.882 mo
149.999 335.453 li
176.443 335.453 li
176.443 412.882 li
cp
0 .720699 .0347295 0 cmyk
f
149.999 412.882 mo
149.999 335.453 li
176.443 335.453 li
176.443 412.882 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXC+DengXian-Regular*1 [0 -9 -9 0 0 0 ]msf165.821 407.28 mo(!"#$%"$)[-3.58017 -6.33423 -4.95724 -4.20114 -5.83026 -6.33423 0 ]ysh165.821 366 mo("&'\()[-6.32974 -6.45569 -4.32272 0 ]ysh124.229 412.882 mo
124.229 335.453 li
150.672 335.453 li
150.672 412.882 li
cp
.325963 .164797 0 0 cmyk
f
124.229 412.882 mo
124.229 335.453 li
150.672 335.453 li
150.672 412.882 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf141.25 387.36 mo(&'"\()[-7.49997 -6.87598 -6.62402 0 ]ysh174.395 412.878 mo
174.395 335.449 li
200.838 335.449 li
200.838 412.878 li
cp
.0122683 .218173 .404089 0 cmyk
f
174.395 412.878 mo
174.395 335.449 li
200.838 335.449 li
200.838 412.878 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf191.416 384.96 mo(\)*+)[-8.12524 -5.62924 0 ]ysh269.116 412.879 mo
269.116 335.45 li
281.47 335.45 li
281.47 412.879 li
cp
0 .720699 .0347295 0 cmyk
f
269.116 412.879 mo
269.116 335.45 li
281.47 335.45 li
281.47 412.879 li
cp
.776394 .626703 .405005 .218875 cmyk
@
256.5 412.88 mo
256.5 335.45 li
269.116 335.45 li
269.116 412.88 li
cp
.325963 .164797 0 0 cmyk
f
256.5 412.88 mo
256.5 335.45 li
269.116 335.45 li
269.116 412.88 li
cp
.776394 .626703 .405005 .218875 cmyk
@
281.47 412.876 mo
281.47 335.449 li
293.557 335.449 li
293.557 412.876 li
cp
.0122683 .218173 .404089 0 cmyk
f
281.47 412.876 mo
281.47 335.449 li
293.558 335.449 li
293.558 412.876 li
cp
.776394 .626703 .405005 .218875 cmyk
@
315.476 412.879 mo
315.476 335.45 li
327.83 335.45 li
327.83 412.879 li
cp
0 .720699 .0347295 0 cmyk
f
315.476 412.879 mo
315.476 335.45 li
327.83 335.45 li
327.83 412.879 li
cp
.776394 .626703 .405005 .218875 cmyk
@
302.859 412.88 mo
302.859 335.45 li
315.476 335.45 li
315.476 412.88 li
cp
.325963 .164797 0 0 cmyk
f
302.859 412.88 mo
302.859 335.45 li
315.476 335.45 li
315.476 412.88 li
cp
.776394 .626703 .405005 .218875 cmyk
@
327.83 412.876 mo
327.83 335.449 li
339.917 335.449 li
339.917 412.876 li
cp
.0122683 .218173 .404089 0 cmyk
f
327.83 412.876 mo
327.83 335.449 li
339.917 335.449 li
339.917 412.876 li
cp
.776394 .626703 .405005 .218875 cmyk
@
349.219 412.878 mo
349.219 335.449 li
375.662 335.449 li
375.662 412.878 li
cp
.325963 .164797 0 0 cmyk
f
349.219 412.878 mo
349.219 335.449 li
375.662 335.449 li
375.662 412.878 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf366.241 387.36 mo(&'"\()[-7.49997 -6.87598 -6.62402 0 ]ysh385.074 413.49 mo
385.074 336.061 li
411.517 336.061 li
411.517 413.49 li
cp
.369879 .299321 .304356 .000976577 cmyk
f
385.074 413.49 mo
385.074 336.061 li
411.517 336.061 li
411.517 413.49 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXB+DengXian-Regular gcheck setglobal} if
1 2628 20 <00020064fe2503fa03be000b002c0064b615181d00460c18b8042f401106
26122304221212141e1e1b2627272a14411303f7000f00090433006c000f
03f8002a00030433006c002a03fe001b00200433006c001b0404003f2b3f
2b3f2b3f12392f3311392f11392f012f1733ed2fedc410c6303113141633
323635342623220607341233321733363733061511140623202737163320
1135343637230606232202e8a39ea3aba89ea3a684e2cff56904010a7806
e8e2fea3427e31f201490101043ab384c5d901abcbd6dccdcad8dccef901
1acd42776683fd0bb0f7fe17a9013458172a176d67011500>XAHLXB+DengXian-Regular AddT42Char 
1 2126 17 <00020063ff9c03fb055d001700230054b50e0c1846000cb8042f400e071e
0903110707031112120f030a410f03e8000f03fd000300210433006c0003
03f80015001b0433006c001503fe003f2b3f2b3f3f1112392f3311392f01
2f1733ed2fed10c630311334123332161733263511331114172326352306
0623220237141633323635342623220663ebd276a63704037f087a0a043e
a975d0e4839d9eabaaa7a4a4a101abf5011e5b662e2f0203fb2a7d5a8139
6f5f0114fdcadedaced1d7df>XAHLXB+DengXian-Regular AddT42Char 
XAHLXB+DengXian-Regular /CharStrings get begin
/g20 20 def
/g17 17 def
end
XAHLXB+DengXian-Regular /Encoding get
dup 60 /g20 put
dup 61 /g17 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXB+DengXian-Regular*1 [33{/.notdef}rp /g7 /g26 /g28 /g32 /g31 /g3 /g27 /g33 /g6 /g8 /g13 /g4 /g18 /g16 /g11 /g30 /g21 /g14 /g12 /g19 /g25 /g34 /g9 /g2 /g29 /g22 /g15 /g20 /g17 194{/.notdef}rp]XAHLXB+DengXian-Regular nfXAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf402.096 395.76 mo(3:<5':=)[-6.12491 -2.62079 -6.88086 -10.1208 -6.88077 -2.62079 0 ]ysh411.178 413.49 mo
411.178 336.061 li
437.621 336.061 li
437.621 413.49 li
cp
.301396 .0173037 .421912 0 cmyk
f
411.178 413.49 mo
411.178 336.061 li
437.621 336.061 li
437.621 413.49 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXB+DengXian-Regular gcheck setglobal} if
1 998 10 <000200c1ffb004120531000b00140038b11106bb0438000700000438b20c
1105b8043eb46c11110807be03fa00080010043e006c000803eb003f2b3f
12392f2b012fed2fed323031011406062323112311213216073426232311
333236041272d792f086016ee5fe88b7b5d7e0aab903927dc36cfdca0581
dcc592a3fd8ba700>XAHLXB+DengXian-Regular AddT42Char 
XAHLXB+DengXian-Regular /CharStrings get begin
/g10 10 def
end
XAHLXB+DengXian-Regular /Encoding get
dup 62 /g10 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXB+DengXian-Regular*1 [33{/.notdef}rp /g7 /g26 /g28 /g32 /g31 /g3 /g27 /g33 /g6 /g8 /g13 /g4 /g18 /g16 /g11 /g30 /g21 /g14 /g12 /g19 /g25 /g34 /g9 /g2 /g29 /g22 /g15 /g20 /g17 /g10 193{/.notdef}rp]XAHLXB+DengXian-Regular nfXAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf428.2 395.04 mo(>9'=$.%)[-6.62524 -4.12924 -6.8772 -6.87726 -6.62512 -5.37723 0 ]ysh2 lw
0 lj
8 ml
101.945 374.164 mo
124.229 374.167 li
@
200.838 374.164 mo
210.14 374.165 li
@
247.198 374.163 mo
256.499 374.165 li
@
293.557 374.163 mo
302.859 374.165 li
@
339.917 374.163 mo
349.219 374.164 li
@
375.662 374.164 mo
385.074 374.776 li
@
444.393 413.897 mo
444.393 336.468 li
470.837 336.468 li
470.837 413.897 li
cp
.0806592 .0636606 .0646372 0 cmyk
f
.75 lw
1 lj
10 ml
444.393 413.897 mo
444.393 336.468 li
470.837 336.468 li
470.837 413.897 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: KAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXB+DengXian-Regular gcheck setglobal} if
1 3188 24 <000100a5ffb00124055e00030017be0003042f0000000103e9000003fd00
3f3f012fed303117113311a57f5005aefa52>XAHLXB+DengXian-Regular AddT42Char 
1 0 1 <00010006ffb002ff056000030013b2010302ba03ec000103fa003f3f012f
2f3031172301338781027d7c5005b000>XAHLXB+DengXian-Regular AddT42Char 
1 454 5 <000100b9ffb0039f053100090038b40707020509b80438b300020508b804
3db46c05050100be03fa00010004043d006c000103eb003f2b3f12392f2b
012f2fed3212392f303117112115211121152111b902e6fda00236fdca50
058171fdfc6ffd63>XAHLXB+DengXian-Regular AddT42Char 
1 3078 23 <000100a0ffb003c2055e000b0035b50a01010b0703b8042fb704090b0701
040805bd03e9000803f70000000403fd003f333f3f11123939012f332fed
321239113330310501071123113311013301010327fe80887f7f01f1a0fe
4e01c45001fd7efe8105aefc5001fcfe53fdb300>XAHLXB+DengXian-Regular AddT42Char 
XAHLXB+DengXian-Regular /CharStrings get begin
/g24 24 def
/g1 1 def
/g5 5 def
/g23 23 def
end
XAHLXB+DengXian-Regular /Encoding get
dup 63 /g24 put
dup 64 /g1 put
dup 65 /g5 put
dup 66 /g23 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXB+DengXian-Regular*1 [33{/.notdef}rp /g7 /g26 /g28 /g32 /g31 /g3 /g27 /g33 /g6 /g8 /g13 /g4 /g18 /g16 /g11 /g30 /g21 /g14 /g12 /g19 /g25 /g34 /g9 /g2 /g29 /g22 /g15 /g20 /g17 /g10 /g24 /g1 /g5 /g23 189{/.notdef}rp]XAHLXB+DengXian-Regular nfXAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf461.415 400.08 mo(/-2?@A2B-)[-6.87476 -6.1189 -5.9989 -2.62677 -4.49887 -5.74686 -5.9989 -5.6268 0 ]ysh2 lw
0 lj
8 ml
102.844 469.785 mo
336.237 469.785 li
@
1.75 lw
124.229 374.167 mo
110.746 471.191 li
@
210.14 374.165 mo
195.719 469.785 li
@
256.5 374.165 mo
242.625 469.785 li
@
302.859 374.165 mo
289.745 469.785 li
@
349.219 374.164 mo
334.325 471.191 li
@
.426368 .347875 .353155 .00985733 cmyk
XAHLXC+DengXian-Regular*1 [9 0 0 -9 0 0 ]msf73.1287 307.2 mo(\)*)[5.00042 0 ]xsh80.6287 307.2 mo(+,)[4.75013 0 ]xsh73.1287 316.08 mo(-*./0)[6.24957 2.49662 4.74654 4.74654 0 ]xsh73.1287 325.2 mo(1*/)[4.12473 2.49571 0 ]xsh123.406 307.2 mo(2*34+)[4.24981 2.50381 4.75374 3.99782 0 ]xsh123.406 316.08 mo(1*)[4.12473 0 ]xsh130.031 316.08 mo(30)[4.75012 0 ]xsh123.406 325.2 mo(#*/4)[3.62525 2.50021 4.75014 0 ]xsh138.281 325.2 mo(/)sh211.013 307.2 mo(2*34)[4.2498 2.50381 4.75374 0 ]xsh226.513 307.2 mo(6)sh211.013 316.08 mo(1*)[4.12473 0 ]xsh217.638 316.08 mo(30)[4.75012 0 ]xsh211.013 325.2 mo(#*/4)[3.62524 2.50021 4.75014 0 ]xsh225.888 325.2 mo(0)sh258.186 306.96 mo(2*34)[4.24979 2.50381 4.75375 0 ]xsh273.686 306.96 mo(6)sh258.186 315.84 mo(1*)[4.12473 0 ]xsh264.811 315.84 mo(30)[4.75012 0 ]xsh258.186 324.96 mo(#*/4)[3.62524 2.50021 4.75012 0 ]xsh273.061 324.96 mo(0)sh302.913 306.96 mo(2*34)[4.24979 2.50381 4.75375 0 ]xsh318.413 306.96 mo(,)sh302.913 315.84 mo(1*)[4.12473 0 ]xsh309.538 315.84 mo(30)[4.75012 0 ]xsh302.913 324.96 mo(#*/4)[3.62524 2.50021 4.75012 0 ]xsh317.788 324.96 mo(0)sh347.784 306.96 mo(2*)[4.24979 0 ]xsh354.534 306.96 mo(+,)[4.75012 0 ]xsh364.034 306.96 mo(4)sh368.034 306.96 mo(.)sh347.784 315.84 mo(1*)[4.12473 0 ]xsh354.409 315.84 mo(/)sh347.784 324.96 mo(#*)[3.62524 0 ]xsh353.909 324.96 mo(+,)[4.75012 0 ]xsh363.409 324.96 mo(4)sh367.409 324.96 mo(/)sh385.858 307.44 mo(\))sh393.358 307.44 mo(/)sh385.858 316.56 mo(-*)[6.24954 0 ]xsh394.608 316.56 mo(,)sh399.358 316.56 mo(5)sh385.858 325.44 mo(1*)[4.12473 0 ]xsh392.483 325.44 mo(/)sh444.607 311.28 mo(\)*)[5.0004 0 ]xsh452.107 311.28 mo(/)sh444.607 320.4 mo(-*)[6.24954 0 ]xsh453.357 320.4 mo(/)sh444.607 329.28 mo(1*/)[4.12473 2.4957 0 ]xsh118.706 441.6 mo(\)*)[5.00042 0 ]xsh126.206 441.6 mo(+,)[4.75012 0 ]xsh118.706 450.72 mo(-*./0)[6.24957 2.49662 4.74654 4.74654 0 ]xsh118.706 459.6 mo(1*)[4.12473 0 ]xsh125.331 459.6 mo(/)sh130.081 459.6 mo(,)sh202.891 442.8 mo(\)*)[5.00041 0 ]xsh210.391 442.8 mo(+,)[4.75012 0 ]xsh202.891 451.92 mo(-*./0)[6.24956 2.49663 4.74654 4.74654 0 ]xsh202.891 460.8 mo(1*)[4.12473 0 ]xsh209.516 460.8 mo(/)sh214.266 460.8 mo(,)sh251.529 442.8 mo(\)*)[5.0004 0 ]xsh259.029 442.8 mo(+,)[4.75012 0 ]xsh251.529 451.92 mo(-*)[6.24954 0 ]xsh260.279 451.92 mo(0.,)[4.75012 4.75012 0 ]xsh251.529 460.8 mo(1*)[4.12473 0 ]xsh258.154 460.8 mo(/)sh262.904 460.8 mo(,)sh297.849 441.6 mo(\)*)[5.0004 0 ]xsh305.349 441.6 mo(+,)[4.75012 0 ]xsh297.849 450.72 mo(-*)[6.24954 0 ]xsh306.599 450.72 mo(/06)[4.75012 4.75012 0 ]xsh297.849 459.6 mo(1*)[4.12473 0 ]xsh304.474 459.6 mo(/)sh309.224 459.6 mo(,)sh345.185 441.6 mo(\)*)[5.0004 0 ]xsh352.685 441.6 mo(+,)[4.75012 0 ]xsh345.185 450.72 mo(-*)[6.24954 0 ]xsh353.935 450.72 mo(,5)[4.75012 0 ]xsh345.185 459.6 mo(1*)[4.12473 0 ]xsh351.81 459.6 mo(/)sh356.56 459.6 mo(,)sh.75021 .679683 .670222 .90164 cmyk
%ADOBeginSubsetFont: OAAAAA+DengXian-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXD+DengXian-Bold gcheck setglobal} if
1 594 7 <000200afffb004dd0531000800160040b30d090511bb0442001200090442
b3000c0510b8044bb56c0505130e12be03fa00130004044b006c001303eb
003f2b3f3312392f2b32012fed2fed3210c6303101342623231133323637
1406070121012311231121320403aa988ce4ec8597f3ab9c0187feebfea7
cdf301eff5010a0393747afe1a837796d223fda6023efdc20581d700>XAHLXD+DengXian-Bold AddT42Char 
1 1586 14 <00010098ffb0017e055e00030017be0003042f0000000103e8000003fd00
3f3f012fed30311711331198e65005aefa52>XAHLXD+DengXian-Bold AddT42Char 

1 0 1 <> XAHLXD+DengXian-Bold AddT42Char 
1 0 2 <0001ffedff45035805560003000eb40002000204003f2f012f2f30310701
3301130295d6fd6cbb0611f9ef00>XAHLXD+DengXian-Bold AddT42Char 
1 316 5 <000100afffb003c1053100090038b40808030600b80442b301030609b804
4db46c06060201be03fa000200050449006c000203eb003f2b3f12392f2b
012f2fed3212392f30310523112115211121152101a2f30312fde10208fd
f8500581c3fe55bd>XAHLXD+DengXian-Bold AddT42Char 
1 1476 13 <00010096ffb00436055e000b0035b50a01010b0703b8042fb704090b0701
040805bd03e8000803f70000000403fd003f333f3f11123939012f332fed
32123911333031050107112311331101210101032afec572e7e7019c0107
fe7101a55001c75cfe9505aefc8501cefe56fda9>XAHLXD+DengXian-Bold AddT42Char 
1 194 4 <000200b0ffb005560531000700110031bc00040442000d00080442b2000e
03410a0449006c000e03eb000d00040449006c000d03fa003f2b3f2b012f
ed2fed30310110212311213212371402042321112120000461fe23e20101
d3ebf5a4fecfcafdf901d9015e016f027c01f4fc010112f9dcfebcac0581
fe9e>XAHLXD+DengXian-Bold AddT42Char 
1 1396 12 <00020098ffb0017e055e00030007002ab10307b8042fb2000405410903f7
000403fd000100000439006c000103e8003f2b3f3f012f33ed3230311335
33150311331198e5e5e60499c5c5fb170401fbff>XAHLXD+DengXian-Bold AddT42Char 
1 2224 19 <0001002eff9c033403c60028004cb31b000621bb0431001500000431400d
0d102525181c1c18070703181f410a0437006c001803f80003000a043600
6c000303fe003f2b3f2b12392f11392f11391133012fed2fedc610c43031
2514062322262737161633323635342626272e0235343633321617072626
232215141616171e020334c9b5bcb01cc60e5b554d5f2a53786e6b3ab3ac
9fab16c80b4b408d234377836e3cd794a776831f453c424a2d3b2b201d49
6f518f9f7579153b307c28342522254b7200>XAHLXD+DengXian-Bold AddT42Char 
1 944 9 <00010056ff9c03a603c60016003ab9000f042f400b031508090906141400
060c410a0433006c000603f8000000120433006c000003fe003f2b3f2b12
392f11392f012f332fed3031052202351012332013072626232206151416
3332371702020ed3e5ead6015d33e60b5b4271696d65971de036640114fb
01020119fec1135555b2b7bab8bd18feb400>XAHLXD+DengXian-Bold AddT42Char 
1 1634 15 <0001008fffb0068c03c600260053b90026042fb400001e0f08b8042fb20c
091db8042f40091e161015030f0f090cb803f7b2001e09b803fdb2221304
b80434b26c1913b803f8003f332b323f33333f12392f1733012fed2f33ed
3212392fed30310511342623220615112311342733161533363633321733
36363332161511231134262322061511031e59616a7ce609db0b043a9875
f13f07369b7ba5a4e75b63697950023d9f85ac97fde20315777596307665
db716ac8d5fd87023d9c88a994fddc00>XAHLXD+DengXian-Bold AddT42Char 
XAHLXD+DengXian-Bold /CharStrings get begin
/g7 7 def
/g14 14 def
/g1 1 def
/g2 2 def
/g5 5 def
/g13 13 def
/g4 4 def
/g12 12 def
/g19 19 def
/g9 9 def
/g15 15 def
end
XAHLXD+DengXian-Bold /Encoding get
dup 40 /g7 put
dup 41 /g14 put
dup 42 /g1 put
dup 43 /g2 put
dup 44 /g5 put
dup 45 /g13 put
dup 46 /g4 put
dup 47 /g12 put
dup 48 /g19 put
dup 49 /g9 put
dup 50 /g15 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXD+DengXian-Bold*1 [33{/.notdef}rp /g6 /g10 /g16 /g18 /g8 /g20 /g17 /g7 /g14 /g1 /g2 /g5 /g13 /g4 /g12 /g19 /g9 /g15 205{/.notdef}rp]XAHLXD+DengXian-Bold nfXAHLXD+DengXian-Bold*1 [11 0 0 -11 0 0 ]msf96.3646 268.56 mo(\("%\)*+*,%-"*./01$/2/#%&'$**)[6.87501 5.87406 5.75304 2.87102 3.00293 4.49902 3.00292 5.49998 5.75304 5.75293 5.87407 3.00293 7.87595 2.87102 4.752 5.12601 4.12495 2.87102 9.74602 2.871 6.36893 5.75304 4.00392 6.62201 4.12494 3.00293 0 ]xsh96.2396 270.528 mo
137.906 270.528 li
179.573 270.528 li
221.24 270.528 li
221.24 271.528 li
179.573 271.528 li
137.906 271.528 li
96.2396 271.528 li
cp
ef
%ADOBeginSubsetFont: QAAAAA+DengXian-Regular Initial
ct_T42Dict begin
-0.141 -0.25 1.148 0.953
 256 array 0 1 255 {1 index exch /.notdef put} for  /QAAAAA+DengXian-Regular
Type42DictBegin
[<00010000000b000b000b000b6376742000000000000000bc000008986670
676d000000000000095400000e79676c79660000000000001bd80000067c
6865616400000000000017d0000000366868656100000000000018080000
0024686d7478000000000000182c000000306c6f6361000000000000185c
0000001a6d6178700000000000001878000000206e616d65000000000000
18980000002c7072657000000000000018c4000003146764697200000000
000000000000000006650013060d001b060d001b0452001b0000ffe50000
ffe50000ffe5fe03fff6060d001c0000ffe4000000730077006d006d0070
006500650077006d007900630070006500600055006f007400650127006b
006f00610061007f0079006d005c0063006c0072007b007000750065006c
00550061006f007400590075006501270059006200690074004a00590065
0070005900610069004d0057005c006300690071007f0000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000055d
0001000005310015007905310015000000000000000000000000000003aa
0014007affb0ffec0000ffb0ffec0000ffb0ffec0000fe25000000000531
000cfcb2fff4000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000085007f0000000000000069
0063005b000000000088007e0075009000000072006b005e00000000007f
0086000000000000006a005f046400150079404927262587868584838281
807f7e7d7c7b7a797877767574737271706f6e6d6c6b6a69686766656463
6261605f5e5d5c5b5a5958575655545351504f4e4d4c4b4a49484746281f
100a092c01b10b0a432343650a2d2c00b10a0b4323430b2d2c01b00643b0
0743650a2d2cb04f2b20b0405158214b525845441b2121591b2321b040b0
042545b004254561648a63525845441b212159592d2c00b00743b006430b
2d2c4b53234b515a5820458a60441b2121592d2c4b545820458a60441b21
21592d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2cb002
435458b0462b1b21212121592d2cb002435458b0472b1b212121592d2cb0
02435458b0482b1b21212121592d2cb002435458b0492b1b212121592d2c
2320b000508a8a64b10003255458b0401bb10103255458b005438b59b04f
2b5923b0622b2321235865592d2cb108000c215460432d2cb10c000c2154
60432d2c012047b0024320b8100062b81000635723b8010062b810006357
5a58b020606659482d2cb1000225b00225b0022553b800352378b00225b0
022560b020632020b00625236250588a21b00160231b2020b00625236252
582321b001611b8a212321205959b8ffc11c60b0206323212d2cb1020042
b123018851b1400188535a58b910000020885458b202010243604259b124
01885158b920000040885458b2020202436042b12401885458b202200243
6042004b014b5258b2020802436042591bb940000080885458b202040243
604259b94000008063b80100885458b202080243604259b94000010063b8
0200885458b202100243604259b12601885158b94000020063b804008854
58b202400243604259b94000040063b80800885458b20280024360425959
59595959b10002435458400a0540084009400c020d021bb10102435458b2
054008ba010000090100b30c010d011bb18002435258b2054008b80180b1
09401bb2054008ba01800009014059b9400000808855b94000020063b804
0088555a58b30c000d011bb30c000d0159595942424242422d2c45b1024e
2b23b04f2b20b0405158214b5158b0022545b1014e2b60591b2321b00325
4520648a63b0405358b1024e2b601b215959442d2c20b00050205823651b
2359b114148a7045b04f2b23b1610626602b8a58b005438b592358655923
103a2d2cb003254963234660b04f2b23b00425b0042549b0032563562060
b062602bb003252010468a4660b02063613a2d2cb00016b1020325b10104
25013e003eb10102060cb00a236542b00b2342b1020325b1010425013f00
3fb10102060cb006236542b0072342b00116b10002435458452345201869
8a6323622020b0405058671b665961b02063b0402361b00423421bb10400
4221215918012d2c2045b1004e2b442d2c4b51b1404f2b505b582045b101
4e2b208a8a4420b1400426616361b1014e2b44211b23218a45b1014e2b20
8a234444592d2c4b51b1404f2b505b5845208ab0406163601b23214559b1
014e2b442d2c2345208a4523612064b04051b0042520b0005323b040515a
5ab1404f2b545a588a0c642364235358b140408a612063611b2063591b8a
5963b1024e2b60442d2c012d2c002d2c05b10b0a432343650a2d2cb10a0b
4323430b022d2cb002256366b00225b82000626023622d2cb0022563b020
6066b00225b82000626023622d2cb002256367b00225b82000626023622d
2cb002256366b02060b00225b82000626023622d2c234ab1024e2b2d2c23
4ab1014e2b2d2c238a4a234564b0022564b002256164b003435258212064
59b1024e2b23b000505865592d2c238a4a234564b0022564b002256164b0
0343525821206459b1014e2b23b000505865592d2c20b003254ab1024e2b
8a103b2d2c20b003254ab1014e2b8a103b2d2cb00325b003258ab0672b8a
103b2d2cb00325b003258ab0682b8a103b2d2cb0032546b003254660b004
252eb00425b00425b0042620b000505821b06a1bb06c592bb0032546b003
25466061b08062208a2010233a232010233a2d2cb0032547b003254760b0
052547b0806361b00225b00625496323b005254ab080632058621b2159b0
042646608a468a4660b02063612d2cb00426b00425b00425b00426b06e2b
208a2010233a232010233a2d2c2320b001545821b00225b1024e2bb08050
20605920606020b001515821211b20b005515821206661b0402361b10003
2550b00325b00325505a5820b00325618a535821b000591b21591bb00754
582066616523211b2121b000595959b1024e2b2d2cb00225b004254ab000
5358b0001b8a8a238ab00159b004254620666120b00526b0062649b00526
b00526b0702b236165b02060206661b02061652d2cb0022546208a20b000
505821b1024e2b1b452321596165b00225103b2d2cb0042620b802006220
b80200638a236120b05d602bb00525118a128a20398a58ba005d10000004
266356602b23212010204620b1024e2b23611b2321208a201049b1024e2b
593b2d2cba005d10000009256356602bb00525b00525b00526b06d2bb15d
0725602bb00525b00525b00525b00525b06f2bba005d1000000826635660
2b20b0005258b0502bb00525b00525b00725b00725b00525b0712bb00217
38b00052b00225b001525a58b00425b0062549b00325b00525496020b040
5258211bb000525820b0025458b00425b00425b00725b0072549b0021738
1bb00425b00425b00425b0062549b0021738595959595921212121212d2c
ba005d1000000b256356602bb00725b00725b00625b00625b00c25b00c25
b00925b00825b06e2bb0041738b00725b00725b00726b06d2bb00425b004
25b00426b06d2bb0502bb00625b00625b00325b0712bb00525b00525b003
25b002173820b00625b00625b00525b0712b60b00625b00625b0042565b0
021738b00225b002256020b040535821b0406123b04061231bb8ffc05058
b0406023b04060235959b00825b00825b00426b0021738b00525b005258a
b002173820b0005258b00625b0082549b00325b00525496020b040525821
1bb0005258b00625b00625b00625b00625b00b25b00b2549b0041738b006
25b00625b00625b00625b00a25b00a25b00725b0712bb0041738b00425b0
0425b00525b00725b00525b0712bb00217381bb00425b00425b9ffc00002
173859595921212121212121212d2cb00425b0032587b00325b003258a20
b000505821b0651bb068592b64b00425b0042506b00425b0042549202063
b00325206351b1000325545b5821212321071b2063b0022520636120b053
2b8a63b00525b0052587b00425b004264ab00050586559b0042620014623
0046b00526200146230046b0001600b000234801b00023480020b0012348
b00223480120b0012348b002234823b2020001082338b2020001092338b1
020107b00116592d2c23100d0c8a63238a636064b940000400635058b000
381b3c592d2cb00625b00925b00925b00726b0762b23b0005458051b0459
b00425b00626b0772bb00525b00526b00525b00526b0762bb0005458051b
0459b0772b2d2cb00725b00a25b00a25b00826b0762b8ab0005458051b04
59b00525b00726b0772bb00625b00626b00625b00626b0762b08b0772b2d
2cb00725b00a25b00a25b00826b0762b8a8a08b00425b00626b0772bb005
25b00526b00525b00526b0762bb0005458051b0459b0772b2d2cb00825b0
0b25b00b25b00926b0762bb00426b0042608b00525b00726b0772bb00625
b00626b00625b00626b0762b08b0772b2d2c03b00325b003254ab00425b0
03254a02b00525b005264ab00526b005264ab00426638a8a63612d2cb15d
0e25602bb00c2611b0052612b00a2539b0072539b00a25b00a25b00925b0
7c2bb00050b00b25b00825b00a25b07c2bb000505458b00725b00b2587b0
0425b004250bb00a2510b00925c1b00225b002250bb0072510b00625c11b
b00725b00b25b00b25b9ffff00762bb00425b004250bb00725b00a25b077
2bb00a25b00825b00825b9ffff00762bb00225b002250bb00a25b00725b0
772b59b00a2546b00a254660b0082546b008254660b00625b006250bb00c
25b00c25b00c2620b000505821b06a1bb06c592bb00425b004250bb00925
b00925b0092620b000505821b06a1bb06c592b23b00a2546b00a25466061
b0206323b0082546b00825466061b02063b1010c255458041b0559b00a26
2010b003253ab00626b006260bb0072620108a3ab10107265458041b0559
b005262010b002253a8a8a0b232010233a2d2c23b0015458b9000040001b
b940000000598ab0015458b9000040001bb94000000059b07d2b2d2c8a8a
080d8ab0015458b9000040001bb94000000059b07d2b2d2c08b0015458b9
000040001bb940000000590db07d2b2d2cb00426b00426080db00426b004
26080db07d2b2d2c200146230046b00a43b00b438a632362612d2cb0092b
b006252eb005257dc5b00625b00525b0042520b000505821b06a1bb06c59
2bb00525b00425b0032520b000505821b06a1bb06c592b18b00825b00725
b00625b00a25b06f2bb00625b00525b0042620b000505821b0661bb06859
2bb00525b00425b0042620b000505821b0661bb068592b54587db0042510
b00325c5b0022510b00125c5b0052621b00526211bb00626b00425b00325
b00826b06f2b59b100024354587db00225b0822bb00525b0822b20206961
b00443012361b06060206961b0206120b00826b008268ab00217388a8a61
20696161b00217381b2121212159182d2c4b52b1010243535a5823102001
3c003c1b2121592d2c23b00225b00225535820b00425583c1b3959b00160
b8ffe91c592121212d2cb0022547b0022547548a20201011b001608a2012
b00161b0852b2d2cb0042547b002254754232012b001612320b006262020
1011b00160b00626b0852b8a8ab0852b2d2cb00243b00152582121212121
1b462346608a8a462320468a608a61b8ff8062232010238ab10c0c8a7045
6020b0005058b00161b8ffba8b1bb0468c59b0106068013a592d2c2045b0
032546524bb013515b58b0022546206861b00325b003253f2321381b2111
592d2c2045b00325465058b0022546206861b00325b003253f2321381b21
11592d0000000001000000012148ae2109445f0f3cf5001b080000000000
c9ab180100000000d194bf1cfedffdf9093607a100000014000200000000
000000010000067bfe2500000993fedffdee093600010000000000000000
000000000000000c08000000058000b9055700a704020059041c006401ca
00a506bb009e0467009e049600630497009e034000250599001a00000000
003f007400db012f014701aa01f00233029402f8033e000000010000000c
026400310042000700020010002f0088000002830e790004000100000001
00120001000000000006001700004f4b544b4e512b44656e675869616e2d
526567756c61720000004112040900640408005504080059040800010406
005504070064040600550406005904430442b2501fe8411b044200f80442
000200e8044200f80442000204010033040000550400005903ef003303ee
005503ee0059043f043d0021001f043e043db23c1f27410e043d0037043d
0002043b04380018001f043a04380032001f04390438b2501fd741220438
0001044b000104490055044a0033044900550449005903fb003303fa0055
03fa005903ed000103eb005503ec003303eb005503eb005904350433003c
001f04340433b2641f48412104330001042f042e0064001f040400640403
00550403005903fe003303fd005503fd005903f9000103f7005503f80033
03f7005503f7005903e900ff03e8005503e840ff59512cff1f502b451f4f
2b801f4e2bff1f4d2bab1f4c2b5e1f4b2b341f4a2a801f492aff1f482a80
1f4729ff1f4629561f45292f1f44291c1f4328721f4228ff1f4128801f40
283d1f3f27ff1f3e26ff1f3d25ff1f3c25261f3b24cd1f3a24ff1f3922ff
1f3823ff1f3721931f3621ff1f3520cd1f3420ff1f331eff1f321e801f31
1e4f1f301fff1f2f1f931f2e1dff1f2d1cff1f243a1b195c23225e1f221b
cd1f211aff1f2019ff1f1f1e2f1f1e16ff1f1d17ff1f1c16ff1f1b391962
5b183a16625b1a3919625b173a16625b15193c16935a1325125511251055
125910590d260c55052604550c5904590f670e550b260a55072606550136
00550e590a401659065900590926085503260255085902590340400501b9
019000542b4bb807ff524bb008505bb00188b02553b00188b040515ab006
88b000555a5b58b101018e59858d8d001d424bb0905358b20300001d4259
b10202435158b104038e59002b002b2b2b002b002b002b002b2b2b2b2b00
2b002b2b2b002b002b2b2b012b012b012b012b012b012b002b2b2b012b00
2b2b2b012b012b002b2b2b2b2b2b012b2b002b2b2b2b2b2b012b2b002b2b
2b2b2b2b012b2b2b2b002b2b2b2b2b2b2b2b2b2b002b2b002b2b2b002b2b
002b2b012b00742b2b002b2b2b002b2b002b2b2b01742b2b2b00742b2b00
2b2b002b2b0173742b002b002b2b002b2b1800>
[1661 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd
1 0 1 <000200b9ffb0050d0531000900110031bc000e0438000500000438b20a06
0d410a043d006c000603eb0005000e043d006c000503fa003f2b3f2b012f
ed2fed3031011402042321112120000310212311212000050da5fed0c9fe
4a0186015f016f88fdb5fb011f010201250280dcfeb8ac0581fea0feaf02
3ffb63013f00>QAAAAA+DengXian-Regular AddT42Char 
1 992 8 <00020063ff9c043303be000b00170031bc0012042e00060000042eb20c09
0f410a0433006c000903f8000300150433006c000303fe003f2b3f2b012f
ed2fed303101140023220035340033321203342623220615141633323604
33fefdeae1fefe0102e7eef985b0aeb1b7b5a7b4b601aef8fee6011df5f9
0117fef1feffd2d5dacdcadfd800>QAAAAA+DengXian-Regular AddT42Char 
1 1520 11 <0001001affb0057e03aa001a0025400a011217010d0505110901bb03f700
14000003fd003f323f33333911331139012f2f3031050133131617363637
1333131617363637133301230326270607030140feda7cb22a120d1828c4
6cc12e1a0f171db67bfecc7aca2c10142acf5003fafd8892713c537f026d
fd97967c465b650275fc0602838f676988fd7800>QAAAAA+DengXian-Regular AddT42Char 
1 852 7 <0001009effb003cd03be0017003fb20d0f08b8042fb20a0917b8042fb500
100f0f090d410a03f70000000903fd001300040433006c001303f8003f2b
3f333f12392f33012fed2f33ed32c6303105113426232206151123113426
2733173336363332161511034e7a818ba47f0502720c0435a27eafa95002
54b1a0cbadfdd30317397139c26d69c9d2fd8d00>QAAAAA+DengXian-Regular AddT42Char 
1 1320 10 <00010025ff9c030303be0029004cb31b000622bb042f00150000042f400d
0c102626181c1c18070703181f410a0434006c001803f80003000a043400
6c000303fe003f2b3f2b12392f11392f11391133012fed2fedc610c43031
25140623222627371616333235342e02272e023534363332161707262623
220615141616171e020303bdaba0b62075157774ec2b4b673c6e6f3ca6a1
92a11c7811675f6765274d8a87703fc9909d7184155354bf36442b1d101b
45684b87946c750e4b415951343e2b2525476900>QAAAAA+DengXian-Regular AddT42Char 
1 232 3 <00020059ff9c036803be000a0025005cb11f09bb042e0013000b042f400d
17040d1e1e220d0e0e0c221605b80435b46c1616220c410d03fd0022001b
0433006c002203f8001000000433006c001003fe003f2b3f2b3f12392f2b
111239113311392f012f3333ed2fedc43031253236363535070606151405
232723062322263534363737353426232206072736363332161501ba5889
4e92ccad028a79060467d99fadeff9a773796f71157820b39cbfab055391
507b04057273c155b5c99d8b9ea60704299089475419816abecf>QAAAAA+DengXian-Regular AddT42Char 
1 654 6 <0001009effb0062103be00260055b2151208b8042fb40909001811bb042f
00120026042f40090019201f0318181215b803f7b2000912b803fdb2041c
0db80433b26c221cb803f8003f332b323f33333f12392f1733012fed2fed
3212392fed10c63031051134262322061511231134262322061511231134
27331617333636333216173336333216151105a26d7e81947e6e7b7b9c7f
07720804043298778094160561eda49f500254b69bc598fdb80254b39ec7
a1fdc303175e85635f6d697b68e3c4d7fd8d>QAAAAA+DengXian-Regular AddT42Char 
1 1126 9 <0002009efe25043403be001800240051b60f0a1f0712040bb8042f400c0c
00461907070f131212030f410f03f7000c04030016001c0433006c001603
f8000300220433006c000303fe003f2b3f2b3f3f12392f3311392f012fed
2fed1732c630310114022322262723161615112311342733161533363633
32120734262322061514163332360434edd079a3370402027f07770b043c
ac7fccdd839c9eaaaba6a4a1a401b1f7fee25b6529522bfe6f04ad6c6c6c
506f61fef0ffcadcdbcecfd8dc00>QAAAAA+DengXian-Regular AddT42Char 
1 606 5 <000100a5ffb00124055e00030017be0003042f0000000103e9000003fd00
3f3f012fed303117113311a57f5005aefa52>QAAAAA+DengXian-Regular AddT42Char 
1 438 4 <00020064ff9c03cd03be0015001b0048400f07151900460d15461a06060a
111900b80434b56c19190a1116410a0433006c001103f8000a0003043300
6c000a03fe003f2b3f2b12392f2b1112392f012fed2fed3210c630311314
1633323637170606232202113436363332121515012206072102e8a99765
91356546c489d9e86ec986d0dcfe4f8c9e08025e120199bfd55362377d6a
01140105a7ea78fef6f92201bcafaa015900>QAAAAA+DengXian-Regular AddT42Char 

1 0 0 <> QAAAAA+DengXian-Regular AddT42Char 
QAAAAA+DengXian-Regular /CharStrings get begin
/g1 1 def
/g8 8 def
/g11 11 def
/g7 7 def
/g10 10 def
/g3 3 def
/g6 6 def
/g9 9 def
/g5 5 def
/g4 4 def
end
QAAAAA+DengXian-Regular /Encoding get
dup 33 /g1 put
dup 34 /g8 put
dup 35 /g11 put
dup 36 /g7 put
dup 37 /g10 put
dup 38 /g3 put
dup 39 /g6 put
dup 40 /g9 put
dup 41 /g5 put
dup 42 /g4 put
pop
end
%ADOEndSubsetFont
/XAHLXE+DengXian-Regular /QAAAAA+DengXian-Regular findfont ct_VMDictPut/XAHLXE+DengXian-Regular*1 [33{/.notdef}rp /g1 /g8 /g11 /g7 /g10 /g3 /g6 /g9 /g5 /g4 213{/.notdef}rp]XAHLXE+DengXian-Regular nfXAHLXE+DengXian-Regular*1 [11 0 0 -11 0 0 ]msf219.727 289.92 mo(!"#$%&'\(\)*)[7.62523 6.25018 7.74617 5.99722 4.50127 5.50226 9.25327 6.25024 2.49918 0 ]xsh498.609 412.186 mo
498.609 334.756 li
525.053 334.756 li
525.053 412.186 li
cp
.0806592 .0636606 .0646372 0 cmyk
f
.75 lw
1 lj
10 ml
498.609 412.186 mo
498.609 334.756 li
525.053 334.756 li
525.053 412.186 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf515.631 386.88 mo(!"#$%)[-2.99994 -6.62405 -6.87604 -6.62396 0 ]ysh533.8 412.186 mo
533.8 334.756 li
560.243 334.756 li
560.243 412.186 li
cp
.369879 .299321 .304356 .000976577 cmyk
f
533.8 412.186 mo
533.8 334.756 li
560.243 334.756 li
560.243 412.186 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf550.822 384.96 mo(3?:.-)[-6.12491 -2.62079 -2.62079 -5.38083 0 ]ysh594.762 412.189 mo
594.762 334.76 li
621.205 334.76 li
621.205 412.189 li
cp
0 .720699 .0347295 0 cmyk
f
594.762 412.189 mo
594.762 334.76 li
621.205 334.76 li
621.205 412.189 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXC+DengXian-Regular*1 [0 -9 -9 0 0 0 ]msf610.583 406.56 mo(!"#$%"$)[-3.58017 -6.33423 -4.95724 -4.20114 -5.83026 -6.33423 0 ]ysh610.583 365.28 mo("&'\()[-6.32974 -6.45569 -4.32272 0 ]ysh568.991 412.189 mo
568.991 334.76 li
595.434 334.76 li
595.434 412.189 li
cp
.325963 .164797 0 0 cmyk
f
568.991 412.189 mo
568.991 334.76 li
595.434 334.76 li
595.434 412.189 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf586.013 386.88 mo(&'"\()[-7.49997 -6.87598 -6.62402 0 ]ysh619.157 412.185 mo
619.157 334.756 li
645.6 334.756 li
645.6 412.185 li
cp
.0122683 .218173 .404089 0 cmyk
f
619.157 412.185 mo
619.157 334.756 li
645.6 334.756 li
645.6 412.185 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf636.179 384.24 mo(\)*+)[-8.12524 -5.62924 0 ]ysh666.964 412.186 mo
666.964 334.757 li
679.319 334.757 li
679.319 412.186 li
cp
0 .720699 .0347295 0 cmyk
f
666.964 412.186 mo
666.964 334.757 li
679.319 334.757 li
679.319 412.186 li
cp
.776394 .626703 .405005 .218875 cmyk
@
654.348 412.187 mo
654.348 334.757 li
666.965 334.757 li
666.965 412.187 li
cp
.325963 .164797 0 0 cmyk
f
654.348 412.187 mo
654.348 334.757 li
666.965 334.757 li
666.965 412.187 li
cp
.776394 .626703 .405005 .218875 cmyk
@
679.319 412.183 mo
679.319 334.756 li
691.406 334.756 li
691.406 412.183 li
cp
.0122683 .218173 .404089 0 cmyk
f
679.319 412.183 mo
679.319 334.756 li
691.406 334.756 li
691.406 412.183 li
cp
.776394 .626703 .405005 .218875 cmyk
@
712.77 412.186 mo
712.77 334.757 li
725.125 334.757 li
725.125 412.186 li
cp
0 .720699 .0347295 0 cmyk
f
712.77 412.186 mo
712.77 334.757 li
725.125 334.757 li
725.125 412.186 li
cp
.776394 .626703 .405005 .218875 cmyk
@
700.154 412.187 mo
700.154 334.757 li
712.771 334.757 li
712.771 412.187 li
cp
.325963 .164797 0 0 cmyk
f
700.154 412.187 mo
700.154 334.757 li
712.77 334.757 li
712.77 412.187 li
cp
.776394 .626703 .405005 .218875 cmyk
@
725.125 412.183 mo
725.125 334.756 li
737.212 334.756 li
737.212 412.183 li
cp
.0122683 .218173 .404089 0 cmyk
f
725.125 412.183 mo
725.125 334.756 li
737.212 334.756 li
737.212 412.183 li
cp
.776394 .626703 .405005 .218875 cmyk
@
758.576 412.186 mo
758.576 334.757 li
770.93 334.757 li
770.93 412.186 li
cp
0 .720699 .0347295 0 cmyk
f
758.576 412.186 mo
758.576 334.757 li
770.93 334.757 li
770.93 412.186 li
cp
.776394 .626703 .405005 .218875 cmyk
@
745.96 412.187 mo
745.96 334.757 li
758.576 334.757 li
758.576 412.187 li
cp
.325963 .164797 0 0 cmyk
f
745.96 412.187 mo
745.96 334.757 li
758.576 334.757 li
758.576 412.187 li
cp
.776394 .626703 .405005 .218875 cmyk
@
770.93 412.183 mo
770.93 334.756 li
783.018 334.756 li
783.018 412.183 li
cp
.0122683 .218173 .404089 0 cmyk
f
770.93 412.183 mo
770.93 334.756 li
783.018 334.756 li
783.018 412.183 li
cp
.776394 .626703 .405005 .218875 cmyk
@
791.766 412.186 mo
791.766 334.756 li
818.209 334.756 li
818.209 412.186 li
cp
.325963 .164797 0 0 cmyk
f
791.766 412.186 mo
791.766 334.756 li
818.209 334.756 li
818.209 412.186 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf808.787 386.88 mo(&'"\()[-7.49997 -6.87598 -6.62402 0 ]ysh826.957 412.185 mo
826.957 334.756 li
853.4 334.756 li
853.4 412.185 li
cp
.369879 .299321 .304356 .000976577 cmyk
f
826.957 412.185 mo
826.957 334.756 li
853.4 334.756 li
853.4 412.185 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf843.978 394.56 mo(3:<5':=)[-6.12491 -2.62079 -6.88086 -10.1208 -6.88077 -2.62079 0 ]ysh853.06 412.185 mo
853.06 334.756 li
879.504 334.756 li
879.504 412.185 li
cp
.301396 .0173037 .421912 0 cmyk
f
853.06 412.185 mo
853.06 334.756 li
879.504 334.756 li
879.504 412.185 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf870.082 393.6 mo(>9'=$.%)[-6.62524 -4.12924 -6.8772 -6.87726 -6.62512 -5.37723 0 ]ysh887.301 412.183 mo
887.301 334.754 li
913.744 334.754 li
913.744 412.183 li
cp
.0806592 .0636606 .0646372 0 cmyk
f
887.301 412.183 mo
887.301 334.754 li
913.744 334.754 li
913.744 412.183 li
cp
.776394 .626703 .405005 .218875 cmyk
@
.75021 .679683 .670222 .90164 cmyk
XAHLXB+DengXian-Regular*1 [0 -12 -12 0 0 0 ]msf904.322 391.92 mo(7$%#$%)[-9.12485 -6.62875 -3.88071 -6.86887 -6.62875 0 ]ysh2 lw
0 lj
8 ml
525.052 373.471 mo
533.8 373.471 li
@
560.243 373.471 mo
568.991 373.475 li
@
645.6 373.471 mo
654.348 373.472 li
@
691.406 373.47 mo
700.154 373.472 li
@
737.212 373.47 mo
745.96 373.472 li
@
783.018 373.47 mo
791.766 373.471 li
@
818.209 373.471 mo
826.957 373.471 li
@
.426368 .347875 .353155 .00985733 cmyk
XAHLXC+DengXian-Regular*1 [9 0 0 -9 0 0 ]msf497.621 309.12 mo(\)*)[5.0004 0 ]xsh505.121 309.12 mo(+,)[4.75012 0 ]xsh497.621 318 mo(-*./0)[6.24954 2.49664 4.74652 4.74652 0 ]xsh497.621 327.12 mo(1*/)[4.12473 2.4957 0 ]xsh533.158 309.12 mo(\)*)[5.00037 0 ]xsh540.658 309.12 mo(6)sh533.158 318 mo(-*./0)[6.24951 2.49664 4.74652 4.74658 0 ]xsh533.158 327.12 mo(1*/)[4.12469 2.49573 0 ]xsh568.045 309.12 mo(2*)[4.24976 0 ]xsh574.795 309.12 mo(5)sh579.545 309.12 mo(4)sh583.545 309.12 mo(5)sh568.045 318 mo(1*)[4.12469 0 ]xsh574.67 318 mo(6)sh568.045 327.12 mo(#*)[3.62524 0 ]xsh574.17 327.12 mo(0)sh578.92 327.12 mo(4)sh582.92 327.12 mo(0)sh654.21 309.12 mo(2*)[4.24976 0 ]xsh660.96 309.12 mo(5)sh665.71 309.12 mo(4)sh669.71 309.12 mo(5)sh654.21 318.24 mo(1*)[4.12469 0 ]xsh660.835 318.24 mo(/,)[4.75012 0 ]xsh654.21 327.12 mo(#*)[3.62524 0 ]xsh660.335 327.12 mo(0)sh665.085 327.12 mo(4)sh669.085 327.12 mo(0)sh698.718 309.12 mo(2*)[4.24976 0 ]xsh705.468 309.12 mo(5)sh710.218 309.12 mo(4)sh714.218 309.12 mo(5)sh698.718 318.24 mo(1*)[4.12469 0 ]xsh705.343 318.24 mo(30)[4.75012 0 ]xsh698.718 327.12 mo(#*)[3.62524 0 ]xsh704.843 327.12 mo(0)sh709.593 327.12 mo(4)sh713.593 327.12 mo(0)sh744.927 309.12 mo(2*)[4.24976 0 ]xsh751.677 309.12 mo(3)sh756.427 309.12 mo(4)sh760.427 309.12 mo(5)sh744.927 318 mo(1*)[4.12469 0 ]xsh751.552 318 mo(/,)[4.75012 0 ]xsh744.927 327.12 mo(#*)[3.62524 0 ]xsh751.052 327.12 mo(/)sh755.802 327.12 mo(4)sh759.802 327.12 mo(0)sh791.134 309.12 mo(2*)[4.24976 0 ]xsh797.884 309.12 mo(/)sh802.634 309.12 mo(4)sh806.634 309.12 mo(5)sh791.134 318 mo(1*)[4.12469 0 ]xsh797.759 318 mo(/,)[4.75012 0 ]xsh791.134 327.12 mo(#*)[3.62524 0 ]xsh797.259 327.12 mo(/)sh802.009 327.12 mo(4)sh806.009 327.12 mo(0)sh828.499 309.12 mo(\)*)[5.00037 0 ]xsh835.999 309.12 mo(/)sh828.499 318 mo(-*)[6.24951 0 ]xsh837.249 318 mo(/,)[4.75012 0 ]xsh828.499 327.12 mo(1*/)[4.12469 2.49573 0 ]xsh839.874 327.12 mo(,)sh887.415 309.84 mo(\)*)[5.00037 0 ]xsh894.915 309.84 mo(/)sh887.415 318.96 mo(-*)[6.24951 0 ]xsh896.165 318.96 mo(/)sh887.415 327.84 mo(1*/)[4.12469 2.49573 0 ]xsh898.79 327.84 mo(,)sh.75021 .679683 .670222 .90164 cmyk
XAHLXD+DengXian-Bold*1 [11 0 0 -11 0 0 ]msf509.861 268.08 mo(.'2%/#)[7.87482 6.62091 9.75592 5.75189 2.88092 0 ]xsh510.236 270.009 mo
552.236 270.009 li
594.236 270.009 li
594.236 271.009 li
552.236 271.009 li
510.236 271.009 li
cp
ef
%ADOBeginSubsetFont: OAAAAA+DengXian-Bold AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXD+DengXian-Bold gcheck setglobal} if
1 44 3 <00010067ff9c04c805460018003ab900100442400b0309170a0a06161600
060d410a0449006c000603ec000000130449006c000003fb003f2b3f2b12
392f11392f012f332fed3031052000111000213204170726262322021514
1233323637170202bcfee6fec50136011dc5010141d6229a70aab8bca46f
9f26d78c64018401570155017aacba4c767afeeffcfafee0897f54fe8b00
>XAHLXD+DengXian-Bold AddT42Char 
1 1262 11 <00010032ffb002d3056300150042b6040215150c1301b8042fb306020c02
be03fd000a000f0437006c000a03e9b2000504b80433b26c1305b803f700
3f332b323f2b3f012f2f33ed3212392f10c6303101112311233533353436
33321715262322061515331501cce6b4b49c9f684a2c57463ede030afca6
035aa7819c950d9a0b4d6861a700>XAHLXD+DengXian-Bold AddT42Char 
XAHLXD+DengXian-Bold /CharStrings get begin
/g3 3 def
/g11 11 def
end
XAHLXD+DengXian-Bold /Encoding get
dup 51 /g3 put
dup 52 /g11 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXD+DengXian-Bold*1 [33{/.notdef}rp /g6 /g10 /g16 /g18 /g8 /g20 /g17 /g7 /g14 /g1 /g2 /g5 /g13 /g4 /g12 /g19 /g9 /g15 /g3 /g11 203{/.notdef}rp]XAHLXD+DengXian-Bold nfXAHLXD+DengXian-Bold*1 [11 0 0 -11 0 0 ]msf552.111 268.08 mo(3\)/00/4/"$)[6.875 2.87103 2.87097 4.75201 4.75201 2.87103 3.75098 2.87103 5.87408 0 ]xsh%ADOBeginSubsetFont: QAAAAA+DengXian-Regular AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal XAHLXE+DengXian-Regular gcheck setglobal} if
1 126 2 <000100a7ff9c04b005310011002abc000604380003000f0438b20c0d04be
03eb00000009043d006c000003fb003f2b3f33012fed2fed303105220035
1133111416333236351133111400029decfef686c0b3becb87fee864010b
f40396fc77c5d7dccd037cfc7efafee7>XAHLXE+DengXian-Regular AddT42Char 
XAHLXE+DengXian-Regular /CharStrings get begin
/g2 2 def
end
XAHLXE+DengXian-Regular /Encoding get
dup 43 /g2 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XAHLXE+DengXian-Regular*1 [33{/.notdef}rp /g1 /g8 /g11 /g7 /g10 /g3 /g6 /g9 /g5 /g4 /g2 212{/.notdef}rp]XAHLXE+DengXian-Regular nfXAHLXE+DengXian-Regular*1 [11 0 0 -11 0 0 ]msf608.063 290.88 mo(!"#$%&'\(\)*)[7.62518 6.25018 7.74622 5.99719 4.50128 5.50226 9.25323 6.25024 2.49921 0 ]xsh219.907 64.3199 mo(!"#$%&'\(\)*)[7.62523 6.25018 7.74617 5.99722 4.50127 5.50226 9.25327 6.25024 2.49918 0 ]xsh511.962 66.96 mo(+\(%&'\(\)*)[7.37555 6.25354 4.50458 5.49457 9.24554 6.25354 2.5025 0 ]xsh437.636 374.526 mo
439.418 374.633 li
439.388 375.132 li
437.606 375.025 li
cp
438.584 371.828 mo
444.393 375.182 li
438.225 377.818 li
cp
f
879.504 373.721 mo
882.301 373.72 li
882.3 373.22 li
879.503 373.221 li
cp
881.302 376.47 mo
887.301 373.469 li
881.3 370.47 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/XAHLXB+DengXian-Regular*1 uf/XAHLXB+DengXian-Regular uf/KAAAAA+DengXian-Regular uf/XAHLXD+DengXian-Bold*1 uf/XAHLXD+DengXian-Bold uf/OAAAAA+DengXian-Bold uf/XAHLXC+DengXian-Regular*1 uf/XAHLXC+DengXian-Regular uf/MAAAAA+DengXian-Regular uf/XAHLXE+DengXian-Regular*1 uf/XAHLXE+DengXian-Regular uf/QAAAAA+DengXian-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
